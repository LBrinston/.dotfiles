# -*- mode: snippet -*-
# name: cmake-boiler-plate
# key: bp
# --
# Specify minimum required CMake
cmake_minimum_required(VERSION 3.5 FATAL_ERROR)

# Specify project and identify languages used
project(${1:src-name} LANGUAGES CXX)

# Specify project and identify languages used
project(${1:prj-name}
  DESCRIPTION "$2"
  LANGUAGES CXX)

# Enable verbose makefiles
set(CMAKE_VERBOSE_MAKEFILE true)

## Global Compiler Flags ######################################################

# Use a list so we can have mult-line and comment stripping
set(WARNING_FLAGS_LIST
  #-Wall            # Enable all warnings
  -Wextra           # Extra warnings
  -Werror           # Treat warnings as errors
  -pedantic-errors  # Enforce strict standard compliance
  -Wconversion      # Warn on implicit conversions
  -Wshadow          # Warn on variable shadowing
  #-Wunused         # Warn on unused variables/values
)
string(JOIN " " WARNING_FLAGS ${WARNING_FLAGS_LIST})
string(APPEND CMAKE_CXX_FLAGS "${WARNING_FLAGS}")

## -- Conditional flags
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  message(STATUS "Using Clang compiler")
  # target_compile_options(test_mandelbrot PRIVATE
  #   -fconstexpr-steps=100000000
  # )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  message(STATUS "Using GCC compiler")
  # target_compile_options(test_mandelbrot PRIVATE
  #   -fconstexpr-ops-limit=1000000000
  #   -fconstexpr-loop-limit=100000000
  # )
else()
  message(STATUS "Unknown compiler, no extra constexpr flags")
endif()
###############################################################################

## Sanitizers #################################################################
## -- ASan
### dep:
option(ENABLE_ASAN "Enable ASan" flase)

if (ENABLE_ASAN)
  # Enable Address Sanitizer (ASan)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -fsanitize=address")
  set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
endif()
## -- End ASan

## -- UBSan
option(ENABLE_UBSAN "Enable UBSan" false)

if (ENABLE_UBSAN)
  # Enable UBSanitizer (UBan)
  set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -fsanitize=undefined")
  set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINK_FLAGS} -fsanitize=undefined")
endif()
## -- end UBSan
###############################################################################

# Include libraries
# target_include_directories(lib)
# message("Including: \${}")

## Build Targets ##############################################################
# --
add_executable($3:target app/test_$3.cpp)
target_include_directories($3 PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(test_$3 Catch2::Catch2WithMain)
###############################################################################
$0

# CMake Output to console
if((DEFINED CMAKE_BUILD_TYPE) AND (NOT CMAKE_BUILD_TYPE STREQUAL ""))
  message("CMAKE_BUILD_TYPE: \${CMAKE_BUILD_TYPE}")
else()
  message("CMAKE_BUILD_TYPE is unset/empty")
endif()
message("CMAKE_CXX_FLAGS: \${CMAKE_CXX_FLAGS}")
message("CMAKE_CXX_FLAGS_DEBUG: \${CMAKE_CXX_FLAGS_DEBUG}")
message("CMAKE_CXX_FLAGS_RELEASE: \${CMAKE_CXX_FLAGS_RELEASE}")
message("CMAKE_CXX_FLAGS_RELWITHDEBINFO: \${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
message("CMAKE_CXX_FLAGS_RELWITHDEBINFO: \${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")

