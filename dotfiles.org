#+title: dotfiles
#+author: Liam Brinston
#+date: 2025-01-02 14:19:44
#+STARTUP: show2levels

* Dotfile management
:PROPERTIES:
:VISIBILITY: folded
:END:

Personal dotfile management, and documentation using org-mode, GNU stow, and git.

** GNU Stow

GNU stow assumes that any file in the ~cwd~ is to be symlinked somewhere (that somewhere, is assumed to be a dir in ~$HOME~ that has the same name as the subdir in the cwd).

*** .stow-local-ignore

Very important to ignore certain files to keep things tidy.
=Note=: creation of a ~.stow-local-ignore~ will override the default used by stow itself.
Note: .stow-local-ignore uses Perl regexp.

#+BEGIN_SRC text :tangle ~/.dotfiles/.stow-local-ignore
\.git
\.gitignore
misc
LICENSE
# Ignore org files at the top of .dotfiles
# This is needed to link our lib-babel.org
# Stow doesn't support negation -_-
^\.\/.*\.org$  # Ignore all .org files in the top-level directory (using './' to limit it)
#+END_SRC

*** Tree Folding (symlinking dirs vs files)

GNU stow refers to linking a dir as "tree folding" (because it folds a file tree into a single symlink). Stow will only do this if:
1. A specified dir is empty.
   OR
2. A specified dir doesn't exist yet.

To prevent this entirely stow can be called with: ~--no-folding~

*** Tree Unfolding

A symlink will have to be unfolded one stow discovers that subdirs are now needed within that folded dir.

*** sync-dotfiles.sh

This script is intended to help smooth out the usage of GNU stow and git together. Anytime new config is pulled in from a git repo =stow= needs to be called which is very easy to forgot.

Sync script borrowed from [[https://systemcrafters.net/managing-your-dotfiles/using-gnu-stow/][SystemCrafters]].

In short, it stashes any current changes, pulls in updates, and checks if the stashed changes can be merged back in.

#+BEGIN_SRC bash :tangle ~/.dotfiles/.bin/sync-dotfiles.sh
#!/bin/bash
# Needs bash not shell because of [[ ]]
# borrowed from: https://systemcrafters.net/managing-your-dotfiles/using-gnu-stow/

# Sync dotfiles repo and ensure that dotfiles are tangled correctly afterward

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[1;30m'
NC='\033[0m'

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

echo -e "${BLUE}Stashing existing changes...${NC}"
stash_result=$(git stash push -m "sync-dotfiles: Before syncing dotfiles")
needs_pop=1
if [ "$stash_result" = "No local changes to save" ]; then
    needs_pop=0
fi

echo -e "${BLUE}Pulling updates from dotfiles repo...${NC}"
echo
git pull origin main
echo

if [[ $needs_pop -eq 1 ]]; then
    echo -e "${BLUE}Popping stashed changes...${NC}"
    echo
    git stash pop
fi

unmerged_files=$(git diff --name-only --diff-filter=U)
if [[ ! -z $unmerged_files ]]; then
   echo -e "${RED}The following files have merge conflicts after popping the stash:${NC}"
   echo
   printf %"s\n" $unmerged_files  # Ensure newlines are printed
else
   # Run stow to ensure all new dotfiles are linked
   stow .
fi
#+END_SRC

** Where to put conf files

The [[https://specifications.freedesktop.org/basedir-spec/0.6/][freedesktop XDG Base Directory Specification]] is widely adopted and provides prescriptions for where user specific data (~$XDG_DATA_HOME~) and user specific config (~$XDG_CONFIG_HOME~) should be.

~$XDG_CONFIG_HOME~
If not set or empty a default of ~$HOME/.config~ should be used.

~$XDG_CONFIG_HOME~
If not set or empty a default of ~$HOME/.local/share~ should be used.

~$XDG_STATE_HOME~

~$XDG_CACHE_HOME~

Which applications support ~XDG_~ ? That can be challenging to determine. There is some tooling out there to help save you from crawling the web to determine if every dotfile in ~$HOME~ can be moved. For example ~xdg-ninja~

#+NAME: XDG-SHELL-VAR
#+BEGIN_SRC bash
# XDG Base Directory Specification Variables
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"
#+END_SRC

*** ~xdg-ninja~

[[https://github.com/b3nj5m1n/xdg-ninja][xdg-ninja git repo]]

_Dependencies_:
- A POSIX-compliant shell
- ~find~
- ~jq~ for parsing json
- (Optional) ~glow~ for rendering markdown in the terminal

~xdg-ninja~ is a diagnostic tool. It will not move dotfiles instead it simply checks if it can be moved and how to do so.

At time of writing it seems xdg-ninja is not packaged for apt so git clone it is:

#+BEGIN_SRC bash
git clone https://github.com/b3nj5m1n/xdg-ninja ~/.bin/xdg-ninja
#+END_SRC

For now I am electing to directly clone this to =~/.bin= instead of =~/.dotfiles/.bin=. I may instead add a check for it to ~.bashrc~ instead. Since this more or less a script that checks a data base this begs the question how do I easily keep this (and other cloned tools) up to date.

**** TODO Keeping git cloned things up to date:
https://askubuntu.com/questions/759058/how-to-keep-a-local-bin-folder-up-to-date-with-updates-from-various-github-rep

** Org-mode & Babel
:PROPERTIES:
:ID:       29b66f1c-8433-4cd5-8323-dddca0e751fc
:END:

Emac's org-mode, babel-blocks and noweb syntax allows for coupling of documentation and configuration. It is \therefore important to let Emacs & Org know where our dotfiles should live.

The following set of functions was inspired by [[https://systemcrafters.net/learning-emacs-lisp/managing-files-and-directories/#example-resolving-the-destination-path-of-a-configuration-file][System crafters]]. The necessary emacs-lisp is shown here for context but is inserted down in [[id:e36764f5-eb21-4c8f-a926-e748fbd3d0ea][DOOM - Identifying Information]] as this is an early insertion point in DOOM's initialization.

#+name: my-dotfiles-vars
#+begin_src emacs-lisp
(defcustom my--dotfiles-dir "~/.dotfiles"
"The path to my personal dotfiles."
:type 'string
:group 'dotfiles)

(defcustom my--dotfiles-home "~"
  "The directory in which my-dotfiles-dir should reside, will probably always be ~."
  :type 'string
  :group 'dotfiles)

(defcustom my--dotfiles-org-files '()
  "The list of org-mode files under the `my--dotfiles-dir'
which contain configuration files that should be tangled"
  :type '(list string)
  :group 'dotfiles)

(setq dotcrafter-org-files '("dotfiles.org"))
#+end_src

* dotfiles
*** android

For the handful of times a year I need to use ~adb~

#+NAME: ANDROID-SHELL-VAR
#+BEGIN_SRC bash
export ANDROID_USER_HOME="$XDG_DATA_HOME/android:$PATH"
#+END_SRC

#+NAME: ADB_HOME
#+BEGIN_SRC bash
alias adb='HOME="$XDG_DATA_HOME"/android adb'
#+END_SRC

*** docker

#+name: DOCKER-SHELL-VAR
#+BEGIN_SRC bash
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
#+END_SRC

*** dotnet

#+name: DOTNET-SHELL-VAR
#+BEGIN_SRC bash
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/dotnet
#+END_SRC

*** rbw - (unofficial) bitwarden cli

rbw is easiest to install via cargo.

_Installation_

#+begin_src shell
cargo install rbw
#+end_src

_Setup_

First login to your bitwarden account

_Bash completions_


*** gnupg

#+name: GNUPG-SHELL-VAR
#+BEGIN_SRC bash
export GNUPGHOME="$XDG_DATA_HOME"/gnupg
#+END_SRC

*** (term) starship

[[curl -sS https://starship.rs/install.sh | sh][starship - cross-shell prompt]]

Let's have a nice prompt as a treat.

1. Source it

#+name:STARSHIP-BASH
#+BEGIN_SRC bash
# If starship is install then let's use it
if which starship > /dev/null; then
    echo "Starship detected! üöÄ"
    eval "$(starship init bash)"
else
    echo "No starship detected."
fi;
#+END_SRC

2. Configure it

#+BEGIN_SRC toml :tangle ~/.dotfiles/.config/starship.toml
# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# Inserts a blank line between shell prompts
add_newline = true

format = """
$username\
$hostname\
$directory\
$git_branch\
$git_status\
$fill\
$cmd_duration $job $time\
$line_break\
$character"""

[fill]
symbol = " "

[directory]
style = "blue"
read_only = " "
truncation_length = 6
truncate_to_repo = false

[character]
success_symbol = '[‚ûú](bold green)'
error_symbol = '[‚óè](bold red)'
# vlcmd_symbol = '[‚ûú](bold green)' # The 'success_symbol' segment is being set to '‚ûú' with the color 'bold green'

[git_branch]
# symbol = "Óú•"
format = "[$symbol$branch]($style)"
style  = "bright-white"

# Disable the package module, hiding it from the prompt completely
[package]
disabled = true
#+END_SRC

*** nala

Nala is a shinier front end to ~libapt-pkg~ made in python.

#+BEGIN_SRC bash :tangle no
sudo apt install nala
#+END_SRC

It supports parallel downloads! Also it will run some basic perf to determine what mirrors are closest to you with src_bash{nala fetch} (=note= this does require sudo).

It also keeps a history (~/var/lib/nala/history.json~) that can be instrumented with it's history command.

*** =bash=
**** .bashrc

The individual per-interactive-shell startup file.

=REMINDER=: the ~:noweb-prefix no~ here is necessary to stop no-web trying to honor the bash #comment before it recognizes #<<our-alternative-no-web>>#

#+BEGIN_SRC bash :tangle ~/.dotfiles/.bashrc :noweb yes :noweb-prefix no
#!/bin/bash

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    ,*i*) ;;
    ,*) return;;
esac

#<<XDG-SHELL-VAR>>#

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTFILE="${XDG_STATE_HOME}"/bash/history
HISTSIZE=1000
HISTFILESIZE=2000
HISTOCONTROL=ignoredups

# Check for fzf
REQUIRED_PKG="fzf"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
#echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
    echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
    sudo apt-get --yes install $REQUIRED_PKG
else
    # Place source for fzf config files here
    source ~/.fzf/key-bindings.bash
    source ~/.fzf/completion.bash
    #[ -f ~/.fzf.bash ] && source ~/.fzf.bash
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (%s)")\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# Turn off the terminal bell
bind 'set bell-style visible'

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    ,*)
        ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'

fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Fancy opening
# https://stackoverflow.com/questions/1298066/how-can-i-check-if-a-package-is-installed-and-install-it-if-not
# Check that we're the first shell spawned - otherwise skip the fancy-ness
LIVE_COUNTER=$(ps a | awk '{print $2}' | grep -vi "tty*" | uniq | wc -l);
if [ $LIVE_COUNTER -eq 1 ]; then

    REQUIRED_PKG="fastfetch"
    PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
    #echo Checking for $REQUIRED_PKG: $PKG_OK
    if [ "" = "$PKG_OK" ]; then
        echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
        sudo apt-add sudo add-apt-repository ppa:zhangsongcui3371/fastfetch
        sudo apt install $REQUIRED_PKG
    else
        LIVE_COUNTER=$(ps a | awk '{print $2}' | grep -vi "tty*" | uniq | wc -l);
        if [ $LIVE_COUNTER -eq 1 ]; then
            fastfetch
        fi
    fi
fi

#<<STARSHIP-BASH>>

# Checking CPU architecture
# cut -f 2 d ":" remove the part of the line before :
# awk '{$1=$1}1' removes the space from the beginning of the line
CPU_INFO=$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')
if [ "Intel(R) Core(TM) i5-7500 CPU @ 3.40GHz" = "$CPU_INFO" ]; then
    # We're on a desktop - test should maybe be more specific?
    #elif [];then
    true # Nop until we decide how we want to use this

fi

# Bash completion
# https://github.com/scop/bash-completion/
#<<BASH-COMPLETION.SH>>

# Default Editor
export EDITOR="emacs -nw"
export VISUAL="doom-emacs"

# Check if bat is installed - note: the bin is named batcat on debian sys because naming conflict
if dpkg -s bat > /dev/null 2>&1; then
    # Set batcat as the paginator for man
    # May need to set MANROFFOPT="-c" if you experience formatting issues
    export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
fi

# Environment variables
export SEMESTER="spring_2025"
export UVIC="$HOME/Documents/UVic"

#<<ANDROID-SHELL-VAR>>#
#<<CARGO-SHELL-VAR>>#
#<<DOCKER-SHELL-VAR>>#
#<<DOTNET-SHELL-VAR>>#
#<<GNUPG-SHELL-VAR>>#
# Adding to PATH
export PATH="$HOME/.local/bin:$PATH"

# Scripts
export PATH="$HOME/.bin/:$PATH"
export PATH="$HOME/scripts/:$PATH"
export PATH="/$HOME/scripts/file_manip:$PATH"
export PATH="/$HOME/scripts/hardware:$PATH"
export PATH="/$HOME/scripts/WIP:$PATH"
export PATH="/$HOME/scripts/rclone:$PATH"
export PATH="/$HOME/scripts/rclone/filters:$PATH"
export PATH="$HOME/scripts/notifications:$PATH"
export PATH="$HOME/scripts/sdr:$PATH"

# Microcontrollers
## Pi Pico
export PATH="/opt/arm-none-eabi/bin:$PATH"
#<<PYTHON_BASHRC>>#
#<<DOOM_BASHRC>>#
#<<OCTAVE-SHELL-VAR>>#
#<<CUDA-SHELL-VAR>>#
#<<WGET-SHELL-VAR>>#
#<<WINE-SHELL-VAR>>#
#+END_SRC
**** .bash_profile

The personal initialization file, executed for _login shells_. This is only read by bash but if it is not found it will fall back to ~/.profile~.

**** .bash_aliases
#+BEGIN_SRC bash :tangle ~/.dotfiles/.bash_aliases
alias ll="ls -la"
alias la="ls -AF"
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
alias rm="rm -I" # save me from myself
alias doom-emacs="emacs --with-profile doom"
alias de="doom-emacs"
#<<ADB_HOME>>#
#+END_SRC

**** bash auto completion

Bash-completion is a tool that allows for easier addition of bash auto-completion via script files that live in ~/etc/profile.d/~.

_Installation_

#+begin_src sh :tangle no
apt install bash-completion
#+end_src

_Configuration_

Many cli tools have a ~gen-completions~ option. Redirect these to a file in ~/etc/profile.d~ and source them in your ~/.bashrc~.

#+name: BASH-COMPLETION.SH
#+begin_src sh :noweb yes
source /etc/profile.d/bash_completion.sh
#+end_src

*** .profile

The original initialization for Bourne shell (aka. ~sh~).

#+BEGIN_SRC shell :tangle ~/.dotfiles/.profile
# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
	. "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi
#+END_SRC

*** =git=

**** .gitconfig

Git supported the XDG spec out of the box so we can just directly place our ~.gitconfig~ at ~XDG_CONFIG_HOME/git/config~ (note config here is a _file_ not a dir).

#+begin_src conf :tangle ~/.dotfiles/.config/git/config
# This is Git's per-user configuration file.

# Syntax
# [ section "subsection"]
# case insesitive
# only alphanumeric characters, - , and . allowed

# all variables must belong to a section

# together section & variables correspond to:
# safe.directory
#+end_src

Basic personal configuration.

#+begin_src conf :tangle ~/.dotfiles/.config/git/config
[user]
name = Liam Brinston
email = labrinston@gmail.com
[core]
editor = doom-emacs
[init]
defaultBranch = main
[safe]
directory = /opt/pico-sdk
#+end_src

Addition configuration inspired by [[fn:git-1]] (<- fix me)

git defaults to alphanumeric order rather than a more logical ordering by commit number or date. So, we sort by commit date and then we put things in columns.

#+begin_src conf :tangle ~/.dotfiles/.config/git/config
[column]
ui = auto
[branch]
sort = -committerdate
#+end_src

git defaults to an algorithm called myers diff (from 1986) but git supports at least three more algorithms:
~myers, minimal, patience, histogram~. Histogram is an improvement upon patience and a compelling reason to use histogram is because it will show you diffs stacked rather than overlapping (which can be confusing).

colorMove marks up moved code sections in a different color than add or removed.

#+begin_src conf :tangle ~/.dotfiles/.config/git/config
[diff]
algorithm = histogram
; Mark moved code in a different colour than add/remove
colorMoved = plain
; Use i/ (index), w/ (working dir), or c/ (commit) instead of a/ and b/ in diffs
mneumonicPrefix = true
; Detect if a file has been renamed
rename = true
#+end_src

_Niceties_

#+begin_src conf :tangle ~/.dotfiles/.config/git/config
[help]
    ; Save me from myself
    autocorrect = true
#+end_src


See:
- [fn:git-1]. [[https://git-scm.com/docs/git-config#_configuration_file][git-config configuration file]] for more details.
- [fn:git-2]. [[https://blog.gitbutler.com/how-git-core-devs-configure-git/][How git core devs configure git]]

**** ~safe.directory~

This tells git that we consider a given dir safe. Without it git _will not_ parse a ~.gitconfig~ of a non-safe (assume to be unless told otherwise), run hooks, etc. This value is _only respected when set in the global ~.gitconfig~..

This value is interpolated.
~~/<path>~ - expands relative to ~$HOME~
~%(prefix)/<path>~ - expands relative to git's runtime prefix.

See: [[https://git-scm.com/docs/git-config/2.35.2#Documentation/git-config.txt-safedirectory][git-scm safe.directory]]

*** .tmux.conf

#+BEGIN_SRC conf :tangle ~/.dotfiles/.config/tmux/tmux.conf
# ~/.tmux.conf
# https://tmuxguide.readthedocs.io/en/latest/tmux/tmux.html

# unbind default prefix and set it to ctrl-a
unbind C-b
set -g prefix C-a
bind C-a send-prefix
set-option -g repeat-time 2 # default is 500ms

# colors
set -g default-terminal "screen-256color"

# fast reset for termux
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded ~/.config/tmux/tmux.conf"

# make error messages hang on a bit longer
set-option -g display-time 4000

# enable mouse support for switching panes/windows
#set -g mouse-utf8 on
set -g mouse on

# splitting panes
# v and h are not bound by default, but we never know in the next versions...
unbind v
unbind h
unbind % # Split vertically
unbind '"' # Split horizontally
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"
# set base index
set -g base-index 1
setw -g pane-base-index 1
# renumber windows if a window is closed
set -g renumber-windows on
# keep current path on new window creation
bind c new-window -c "#{pane_current_path}"

# pane joinging hotkey
bind j choose-window 'join-pane -h -s "%%"'
bind J choose-window 'join-pane -s "%%"'

# Pane adjustments
bind-key -r C-Up resize-pane -U 10 # default 5 - tooo small
bind-key -r C-Down resize-pane -D 10
bind-key -r C-Left resize-pane -L 10
bind-key -r C-Right resize-pane -R 10

# --------------
# Plugins
# --------------
# https://github.com/tmux-plugins/tpm
# https://github.com/tmux-plugins/list

# @TODO: Conditional to install plugin manager with git

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'thewtex/tmux-mem-cpu-load'

# --------------
# Design Changes
# --------------

# Refs
# https://cassidy.codes/blog/2019-08-03-tmux-colour-theme/

# Colour refs - tmux will take hex but converts to nearest 256colour
# -----------
# Dracula Colours
BG_COLOUR='#282a36' # Grey
CURR_LINE_COLOR='#44475a'
FG_COLOR='#f8f8f2'
COMMENT_COLOR='#6272a4'
CYAN='#8be9fd'
GREEN='#50fa7b'
ORANGE='#ffb86c'
PINK='#ff79c6'
PURPLE='#bd93f9'
RED='#ff5555'
YELLOW='#f1fa8c'
# L_WEDGE='#\U1FB6C' # Can't quite get this to work

# Tmux colour element refs
# -----------
#	Elements
# fg/bg (element) - fore/background
# 	Attributes - none or comma delimited list of >=1
# bright/bold. dim, underscore, blink, reverse, hidden, italics, strikethrough

# pane border
set -g pane-border-style fg='#{COMMENT_COLOR}'
set -g pane-active-border-style fg='#{PINK}'

# message text
set -g message-style bg='#{CURR_LINE_COLOR}',fg='#{CYAN}'

# status line
set -g status-style bg='#{CURR_LINE_COLOR}',fg='#{PURPLE}'
set -g status-interval 1

# status left - takes a single string as an arg
# We set fg/bg explicitly followed by conditional - ?client_prefix = if client prefix key
# has been pressed change bg to pink
set -g status-left '#[bg=#{FG_COLOR}]#[fg=#{BG_COLOR}]#{?client_prefix,#[bg=#{PINK}],} ‚óâ '
# are we zoomed into a pane?
set -ga status-left '#[bg=#{CURR_LINE_COLOR}]#[fg=#{PINK}] #{?window_zoomed_flag, ‚Üï  ,   }'

# window status
set-window-option -g window-status-style fg='#{PURPLE}',bg=default
set-window-option -g window-status-current-style fg='#{PINK}',bg='#{BG_COLOR}'
set -g window-status-current-format "#[fg=#{CURR_LINE_COLOR}]#[bg=#{PURPLE}]ü≠¨#[fg=#{FG_COLOR}]#[bg=#{PURPLE}] #I #W #[fg=#{PURPLE}]#[bg=#{CURR_LINE_COLOR}]ü≠¨"
set -g window-status-format "#[fg=#{FG_COLOR}]#[bg=#{CURR_LINE_COLOR}]#I #W #[fg=#{CURR_LINE_COLOR}]ü≠¨ "

# status right
# Here we're using #() to pass a command to bash
set -g status-right-length 100
#set -g status-right '#[fg=#{CYAN},bg=#{CURR_LINE_COLOR}] CPU: #{cpu_icon} #{cpu_percentage} < #[fg=#{PINK}]'
set -g status-right '#[fg=#{CYAN},bg=#{CURR_LINE_COLOR}]ü≠Æ#[fg=#{CURR_LINE_COLOR},bg=#{CYAN}] #($TMUX_PLUGIN_MANAGER_PATH/tmux-mem-cpu-load/tmux-mem-cpu-load -g 5 --interval 2) '
set -ga status-right '#[fg=#{PINK},bg=#{CYAN}]ü≠Æ#[fg=#{CURR_LINE_COLOR},bg=#{PINK}] #(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") '
set -ga status-right '#[fg=#{PURPLE},bg=#{PINK}]ü≠Æ#[fg=#{FG_COLOR},bg=#{PURPLE}] %a %H:%M:%S #[fg=#{COMMENT_COLOR}]%Y-%M-%d '


# ------------
# Plugins Init!
# ------------
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#+END_SRC
*** =fzf=

Installed via apt.
[[https://github.com/junegunn/fzf][fzf github repo]]

**** completion.bash

#+BEGIN_SRC bash :tangle ~/.dotfiles/.fzf/completion.bash
#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/ completion.bash
#
# - $FZF_TMUX               (default: 0)
# - $FZF_TMUX_OPTS          (default: empty)
# - $FZF_COMPLETION_TRIGGER (default: '**')
# - $FZF_COMPLETION_OPTS    (default: empty)

if [[ $- =~ i ]]; then

# To use custom commands instead of find, override _fzf_compgen_{path,dir}
if ! declare -f _fzf_compgen_path > /dev/null; then
  _fzf_compgen_path() {
    echo "$1"
    command find -L "$1" \
      -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  }
fi

if ! declare -f _fzf_compgen_dir > /dev/null; then
  _fzf_compgen_dir() {
    command find -L "$1" \
      -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
  }
fi

###########################################################

# To redraw line after fzf closes (printf '\e[5n')
bind '"\e[0n": redraw-current-line' 2> /dev/null

__fzf_comprun() {
  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then
    _fzf_comprun "$@"
  elif [[ -n "${TMUX_PANE-}" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "${FZF_TMUX_OPTS-}" ]]; }; then
    shift
    fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- "$@"
  else
    shift
    fzf "$@"
  fi
}

__fzf_orig_completion() {
  local l comp f cmd
  while read -r l; do
    if [[ "$l" =~ ^(.*\ -F)\ *([^ ]*).*\ ([^ ]*)$ ]]; then
      comp="${BASH_REMATCH[1]}"
      f="${BASH_REMATCH[2]}"
      cmd="${BASH_REMATCH[3]}"
      [[ "$f" = _fzf_* ]] && continue
      printf -v "_fzf_orig_completion_${cmd//[^A-Za-z0-9_]/_}" "%s" "${comp} %s ${cmd} #${f}"
      if [[ "$l" = *" -o nospace "* ]] && [[ ! "${__fzf_nospace_commands-}" = *" $cmd "* ]]; then
        __fzf_nospace_commands="${__fzf_nospace_commands-} $cmd "
      fi
    fi
  done
}

_fzf_opts_completion() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="
    -x --extended
    -e --exact
    --algo
    -i +i
    -n --nth
    --with-nth
    -d --delimiter
    +s --no-sort
    --tac
    --tiebreak
    -m --multi
    --no-mouse
    --bind
    --cycle
    --no-hscroll
    --jump-labels
    --height
    --literal
    --reverse
    --margin
    --inline-info
    --prompt
    --pointer
    --marker
    --header
    --header-lines
    --ansi
    --tabstop
    --color
    --no-bold
    --history
    --history-size
    --preview
    --preview-window
    -q --query
    -1 --select-1
    -0 --exit-0
    -f --filter
    --print-query
    --expect
    --sync"

  case "${prev}" in
  --tiebreak)
    COMPREPLY=( $(compgen -W "length begin end index" -- "$cur") )
    return 0
    ;;
  --color)
    COMPREPLY=( $(compgen -W "dark light 16 bw" -- "$cur") )
    return 0
    ;;
  --history)
    COMPREPLY=()
    return 0
    ;;
  esac

  if [[ "$cur" =~ ^-|\+ ]]; then
    COMPREPLY=( $(compgen -W "${opts}" -- "$cur") )
    return 0
  fi

  return 0
}

_fzf_handle_dynamic_completion() {
  local cmd orig_var orig ret orig_cmd orig_complete
  cmd="$1"
  shift
  orig_cmd="$1"
  orig_var="_fzf_orig_completion_$cmd"
  orig="${!orig_var-}"
  orig="${orig##*#}"
  if [[ -n "$orig" ]] && type "$orig" > /dev/null 2>&1; then
    $orig "$@"
  elif [[ -n "${_fzf_completion_loader-}" ]]; then
    orig_complete=$(complete -p "$orig_cmd" 2> /dev/null)
    _completion_loader "$@"
    ret=$?
    # _completion_loader may not have updated completion for the command
    if [[ "$(complete -p "$orig_cmd" 2> /dev/null)" != "$orig_complete" ]]; then
      __fzf_orig_completion < <(complete -p "$orig_cmd" 2> /dev/null)
      if [[ "${__fzf_nospace_commands-}" = *" $orig_cmd "* ]]; then
        eval "${orig_complete/ -F / -o nospace -F }"
      else
        eval "$orig_complete"
      fi
    fi
    return $ret
  fi
}

__fzf_generic_path_completion() {
  local cur base dir leftover matches trigger cmd
  cmd="${COMP_WORDS[0]}"
  if [[ $cmd == \\* ]]; then
    cmd="${cmd:1}"
  fi
  cmd="${cmd//[^A-Za-z0-9_=]/_}"
  COMPREPLY=()
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [[ "$cur" == *"$trigger" ]]; then
    base=${cur:0:${#cur}-${#trigger}}
    eval "base=$base"

    dir=
    [[ $base = *"/"* ]] && dir="$base"
    while true; do
      if [[ -z "$dir" ]] || [[ -d "$dir" ]]; then
        leftover=${base/#"$dir"}
        leftover=${leftover/#\/}
        [[ -z "$dir" ]] && dir='.'
        [[ "$dir" != "/" ]] && dir="${dir/%\//}"
        matches=$(eval "$1 $(printf %q "$dir")" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_COMPLETION_OPTS-} $2" __fzf_comprun "$4" -q "$leftover" | while read -r item; do
          printf "%q " "${item%$3}$3"
        done)
        matches=${matches% }
        [[ -z "$3" ]] && [[ "${__fzf_nospace_commands-}" = *" ${COMP_WORDS[0]} "* ]] && matches="$matches "
        if [[ -n "$matches" ]]; then
          COMPREPLY=( "$matches" )
        else
          COMPREPLY=( "$cur" )
        fi
        printf '\e[5n'
        return 0
      fi
      dir=$(dirname "$dir")
      [[ "$dir" =~ /$ ]] || dir="$dir"/
    done
  else
    shift
    shift
    shift
    _fzf_handle_dynamic_completion "$cmd" "$@"
  fi
}

_fzf_complete() {
  # Split arguments around --
  local args rest str_arg i sep
  args=("$@")
  sep=
  for i in "${!args[@]}"; do
    if [[ "${args[$i]}" = -- ]]; then
      sep=$i
      break
    fi
  done
  if [[ -n "$sep" ]]; then
    str_arg=
    rest=("${args[@]:$((sep + 1)):${#args[@]}}")
    args=("${args[@]:0:$sep}")
  else
    str_arg=$1
    args=()
    shift
    rest=("$@")
  fi

  local cur selected trigger cmd post
  post="$(caller 0 | awk '{print $2}')_post"
  type -t "$post" > /dev/null 2>&1 || post=cat

  cmd="${COMP_WORDS[0]//[^A-Za-z0-9_=]/_}"
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [[ "$cur" == *"$trigger" ]]; then
    cur=${cur:0:${#cur}-${#trigger}}

    selected=$(FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_COMPLETION_OPTS-} $str_arg" __fzf_comprun "${rest[0]}" "${args[@]}" -q "$cur" | $post | tr '\n' ' ')
    selected=${selected% } # Strip trailing space not to repeat "-o nospace"
    if [[ -n "$selected" ]]; then
      COMPREPLY=("$selected")
    else
      COMPREPLY=("$cur")
    fi
    printf '\e[5n'
    return 0
  else
    _fzf_handle_dynamic_completion "$cmd" "${rest[@]}"
  fi
}

_fzf_path_completion() {
  __fzf_generic_path_completion _fzf_compgen_path "-m" "" "$@"
}

# Deprecated. No file only completion.
_fzf_file_completion() {
  _fzf_path_completion "$@"
}

_fzf_dir_completion() {
  __fzf_generic_path_completion _fzf_compgen_dir "" "/" "$@"
}

_fzf_complete_kill() {
  _fzf_proc_completion "$@"
}

_fzf_proc_completion() {
  _fzf_complete -m --header-lines=1 --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command ps -eo user,pid,ppid,start,time,command 2> /dev/null ||
      command ps -eo user,pid,ppid,time,args # For BusyBox
  )
}

_fzf_proc_completion_post() {
  awk '{print $2}'
}

_fzf_host_completion() {
  _fzf_complete +m -- "$@" < <(
    command cat <(command tail -n +1 ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2> /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i <= NF; i++) print $1 " " $i}' | command grep -v '[*?%]') \
        <(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
        <(command grep -v '^\s*\(#\|$\)' /etc/hosts | command grep -Fv '0.0.0.0') |
        awk '{if (length($2) > 0) {print $2}}' | sort -u
  )
}

_fzf_var_completion() {
  _fzf_complete -m -- "$@" < <(
    declare -xp | sed -En 's|^declare [^ ]+ ([^=]+).*|\1|p'
  )
}

_fzf_alias_completion() {
  _fzf_complete -m -- "$@" < <(
    alias | sed -En 's|^alias ([^=]+).*|\1|p'
  )
}

# fzf options
complete -o default -F _fzf_opts_completion fzf
# fzf-tmux is a thin fzf wrapper that has only a few more options than fzf
# itself. As a quick improvement we take fzf's completion. Adding the few extra
# fzf-tmux specific options (like `-w WIDTH`) are left as a future patch.
complete -o default -F _fzf_opts_completion fzf-tmux

d_cmds="${FZF_COMPLETION_DIR_COMMANDS:-cd pushd rmdir}"
a_cmds="
  awk bat cat diff diff3
  emacs emacsclient ex file ftp g++ gcc gvim head hg hx java
  javac ld less more mvim nvim patch perl python ruby
  sed sftp sort source tail tee uniq vi view vim wc xdg-open
  basename bunzip2 bzip2 chmod chown curl cp dirname du
  find git grep gunzip gzip hg jar
  ln ls mv open rm rsync scp
  svn tar unzip zip"

# Preserve existing completion
__fzf_orig_completion < <(complete -p $d_cmds $a_cmds 2> /dev/null)

if type _completion_loader > /dev/null 2>&1; then
  _fzf_completion_loader=1
fi

__fzf_defc() {
  local cmd func opts orig_var orig def
  cmd="$1"
  func="$2"
  opts="$3"
  orig_var="_fzf_orig_completion_${cmd//[^A-Za-z0-9_]/_}"
  orig="${!orig_var-}"
  if [[ -n "$orig" ]]; then
    printf -v def "$orig" "$func"
    eval "$def"
  else
    complete -F "$func" $opts "$cmd"
  fi
}

# Anything
for cmd in $a_cmds; do
  __fzf_defc "$cmd" _fzf_path_completion "-o default -o bashdefault"
done

# Directory
for cmd in $d_cmds; do
  __fzf_defc "$cmd" _fzf_dir_completion "-o nospace -o dirnames"
done

unset cmd d_cmds a_cmds

_fzf_setup_completion() {
  local kind fn cmd
  kind=$1
  fn=_fzf_${1}_completion
  if [[ $# -lt 2 ]] || ! type -t "$fn" > /dev/null; then
    echo "usage: ${FUNCNAME[0]} path|dir|var|alias|host|proc COMMANDS..."
    return 1
  fi
  shift
  __fzf_orig_completion < <(complete -p "$@" 2> /dev/null)
  for cmd in "$@"; do
    case "$kind" in
      dir)   __fzf_defc "$cmd" "$fn" "-o nospace -o dirnames" ;;
      var)   __fzf_defc "$cmd" "$fn" "-o default -o nospace -v" ;;
      alias) __fzf_defc "$cmd" "$fn" "-a" ;;
      *)     __fzf_defc "$cmd" "$fn" "-o default -o bashdefault" ;;
    esac
  done
}

# Environment variables / Aliases / Hosts / Process
_fzf_setup_completion 'var'   export unset printenv
_fzf_setup_completion 'alias' unalias
_fzf_setup_completion 'host'  ssh telnet
_fzf_setup_completion 'proc'  kill

fi
#+END_SRC
**** key-bindings.bash

#+BEGIN_SRC bash :tangle ~/.dotfiles/.fzf/key-bindings.bash
#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/ key-bindings.bash
#
# - $FZF_TMUX_OPTS
# - $FZF_CTRL_T_COMMAND
# - $FZF_CTRL_T_OPTS
# - $FZF_CTRL_R_OPTS
# - $FZF_ALT_C_COMMAND
# - $FZF_ALT_C_OPTS

# Key bindings
# ------------
__fzf_select__() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" | while read -r item; do
    printf '%q ' "$item"
  done
  echo
}

if [[ $- =~ i ]]; then

__fzfcmd() {
  [[ -n "$TMUX_PANE" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "$FZF_TMUX_OPTS" ]]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  local selected="$(__fzf_select__)"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

__fzf_cd__() {
  local cmd dir
  cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
  dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m) && printf 'cd -- %q' "$dir"
}

__fzf_history__() {
  local output
  output=$(
    builtin fc -lnr -2147483648 |
      last_hist=$(HISTTIMEFORMAT='' builtin history 1) perl -n -l0 -e 'BEGIN { getc; $/ = "\n\t"; $HISTCMD = $ENV{last_hist} + 1 } s/^[ *]//; print $HISTCMD - $. . "\t$_" if !$seen{$_}++' |
      FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_R_OPTS +m --read0" $(__fzfcmd) --query "$READLINE_LINE"
  ) || return
  READLINE_LINE=${output#*$'\t'}
  if [[ -z "$READLINE_POINT" ]]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}

# Required to refresh the prompt after fzf
bind -m emacs-standard '"\er": redraw-current-line'

bind -m vi-command '"\C-z": emacs-editing-mode'
bind -m vi-insert '"\C-z": emacs-editing-mode'
bind -m emacs-standard '"\C-z": vi-editing-mode'

if (( BASH_VERSINFO[0] < 4 )); then
  # CTRL-T - Paste the selected file path into the command line
  bind -m emacs-standard '"\C-t": " \C-b\C-k \C-u`__fzf_select__`\e\C-e\er\C-a\C-y\C-h\C-e\e \C-y\ey\C-x\C-x\C-f"'
  bind -m vi-command '"\C-t": "\C-z\C-t\C-z"'
  bind -m vi-insert '"\C-t": "\C-z\C-t\C-z"'

  # CTRL-R - Paste the selected command from history into the command line
  bind -m emacs-standard '"\C-r": "\C-e \C-u\C-y\ey\C-u"$(__fzf_history__)"\e\C-e\er"'
  bind -m vi-command '"\C-r": "\C-z\C-r\C-z"'
  bind -m vi-insert '"\C-r": "\C-z\C-r\C-z"'
else
  # CTRL-T - Paste the selected file path into the command line
  bind -m emacs-standard -x '"\C-t": fzf-file-widget'
  bind -m vi-command -x '"\C-t": fzf-file-widget'
  bind -m vi-insert -x '"\C-t": fzf-file-widget'

  # CTRL-R - Paste the selected command from history into the command line
  bind -m emacs-standard -x '"\C-r": __fzf_history__'
  bind -m vi-command -x '"\C-r": __fzf_history__'
  bind -m vi-insert -x '"\C-r": __fzf_history__'
fi

# ALT-C - cd into the selected directory
bind -m emacs-standard '"\ec": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
bind -m vi-command '"\ec": "\C-z\ec\C-z"'
bind -m vi-insert '"\ec": "\C-z\ec\C-z"'

fi
#+END_SRC

#+RESULTS:
*** Octave

#+name: OCTAVE-SHELL-VAR
#+BEGIN_SRC bash
export OCTAVE_HISTFILE="$XDG_STATE_HOME/octave_hist"
#+END_SRC
*** =Python=

#+NAME: PYTHON_BASHRC
#+BEGIN_SRC bash
# Python XDG vars
## For python >v3.13.0a3
export PYTHONSTARTUP="$XDG_CONFIG_HOME"/python/pythonrc
## For python <v3.13.0a3
export PYTHON_HISTORY="$XDG_CONFIG_HOME"/python/python_history

# Path to Python virtual environments
export PATH="$HOME/venvs:$PATH"
#+END_SRC

**** .pythonrc

As noted in the comment this is unnecessary for python >v3.13.0a3

#+BEGIN_SRC python :tangle ~/.dotfiles/.config/python/pythonrc
#!/usr/bin/env python3
# This entire thing is unnecessary post v3.13.0a3
# https://github.com/python/cpython/issues/73965

def is_vanilla() -> bool:
    """ :return: whether running "vanilla" Python <3.13 """
    import sys
    return not hasattr(__builtins__, '__IPYTHON__') and 'bpython' not in sys.argv[0] and
sys.version_info < (3, 13)


def setup_history():
    """ read and write history from state file """
    import os
    import atexit
    import readline
    from pathlib import Path

    # Check PYTHON_HISTORY for future-compatibility with Python 3.13
    if history := os.environ.get('PYTHON_HISTORY'):
        history = Path(history)
    # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
    elif state_home := os.environ.get('XDG_STATE_HOME'):
        state_home = Path(state_home)
    else:
        state_home = Path.home() / '.local' / 'state'

    history: Path = history or state_home / 'python_history'

    # https://github.com/python/cpython/issues/105694
    if not history.is_file():
        readline.write_history_file(str(history)) # breaks on macos + python3 without this.

    readline.read_history_file(history)
    atexit.register(readline.write_history_file, history)


if is_vanilla():
    setup_history()
#+END_SRC

**** .pylintrc

This is almost entirely the default generated by the command ~pylint --generate-rcfile~ (=note=: this will take a ~--interactive~ if you want to be walked through each setting).

Valid locations:
- A global config could be placed in ~/etc/pylintrc~
- A default user config at ~~/.pylintrc~
- A project config at ~<project path>/pylintrc~

You may need to specify which with ~pylint --rcfile=<location>~.

At some point I should make some more deliberate choices.

#+BEGIN_SRC conf :tangle ~/.dotfiles/.config/python/pylintrc
[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analysed.
# analyse-fallback-blocks =

# Clear in-memory caches upon conclusion of linting. Useful if running pylint in
# a server-like mode.
# clear-cache-post-run =

# Always return a 0 (non-error) status code, even if lint errors are found. This
# is primarily useful in continuous integration scripts.
# exit-zero =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
# extension-pkg-allow-list =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
# extension-pkg-whitelist =

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
# fail-on =

# Specify a score threshold under which the program will exit with error.
fail-under = 10

# Interpret the stdin as a python script, whose filename needs to be passed as
# the module_or_package argument.
# from-stdin =

# Files or directories to be skipped. They should be base names, not paths.
ignore = ["CVS"]

# Add files or directories matching the regular expressions patterns to the
# ignore-list. The regex matches against paths and can be in Posix or Windows
# format. Because '\\' represents the directory delimiter on Windows systems, it
# can't be used as an escape character.
# ignore-paths =

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
ignore-patterns = ["^\\.#"]

# List of module names for which member attributes should not be checked and will
# not be imported (useful for modules/projects where namespaces are manipulated
# during runtime and thus existing member attributes cannot be deduced by static
# analysis). It supports qualified module names, as well as Unix pattern
# matching.
# ignored-modules =

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook =

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 1

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
# load-plugins =

# Pickle collected data for later comparisons.
persistent = true

# Resolve imports to .pyi stubs if available. May reduce no-member messages and
# increase not-an-iterable messages.
# prefer-stubs =

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
#py-version = "3.10"

# Discover python modules and packages in the file system subtree.
# recursive =

# Add paths to the list of the source roots. Supports globbing patterns. The
# source root is an absolute path or a path relative to the current working
# directory used to determine a package namespace for modules located under the
# source root.
# source-roots =

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
# unsafe-load-any-extension =

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Regular expression matching correct argument names. Overrides argument-naming-
# style. If left empty, argument names will be checked with the set naming style.
# argument-rgx =

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
# attr-rgx =

# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
# bad-names-rgxs =

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
# class-attribute-rgx =

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
# class-const-rgx =

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Regular expression matching correct class names. Overrides class-naming-style.
# If left empty, class names will be checked with the set naming style.
# class-rgx =

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming style.
# const-rgx =

# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = -1

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Regular expression matching correct function names. Overrides function-naming-
# style. If left empty, function names will be checked with the set naming style.
# function-rgx =

# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_"]

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
# good-names-rgxs =

# Include a hint for the correct naming format with invalid-name.
# include-naming-hint =

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
# inlinevar-rgx =

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
# method-rgx =

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
# module-rgx =

# Colon-delimited sets of names that determine each other's naming style when the
# name regexes allow several styles.
# name-group =

# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "^_"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]

# Regular expression matching correct type alias names. If left empty, type alias
# names will be checked with the set naming style.
# typealias-rgx =

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
# typevar-rgx =

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-naming-
# style. If left empty, variable names will be checked with the set naming style.
# variable-rgx =

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
# check-protected-access-in-special-methods =

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
# exclude-too-few-public-methods =

# List of qualified class names to ignore when counting class parents (see R0901)
# ignored-parents =

# Maximum number of arguments for function / method.
max-args = 5

# Maximum number of attributes for a class (see R0902).
max-attributes = 7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of locals for function / method body.
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of positional arguments for function / method.
max-positional-arguments = 5

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format =

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 100

# Maximum number of lines in a module.
max-module-lines = 1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
# single-line-class-stmt =

# Allow the body of an if to be on the same line as the test if there is no else.
# single-line-if-stmt =

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level one.
# allow-any-import-level =

# Allow explicit reexports by alias from a package __init__.
# allow-reexport-from-package =

# Allow wildcard imports from modules that define __all__.
# allow-wildcard-with-all =

# Deprecated modules which should not be used, separated by a comma.
# deprecated-modules =

# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =

# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =

# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant"]

# Couples of modules and preferred modules, separated by a comma.
# preferred-modules =

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "use-symbolic-message-instead"]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
# enable =

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Regular expression of note tags to take in consideration.
# notes-rgx =

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

# Let 'consider-using-join' be raised when the separator to join on would be non-
# empty (resulting in expected fixes of the type: ``"- " + " - ".join(items)``)
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
# msg-template =

# Set the output format. Available formats are: text, parseable, colorized, json2
# (improved json format), json (old json format) and msvs (visual studio). You
# can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.
# output-format =

# Tells whether to display a full report or only the messages.
# reports =

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. No available dictionaries : You need to install both
# the python package and the system dependency for enchant to work.
# spelling-dict =

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

# List of comma separated words that should not be checked.
# spelling-ignore-words =

# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
# spelling-store-unknown-words =

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# generated-members =

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference can
# return multiple potential results while evaluating a Python object, but some
# branches might not be evaluated, which results in partial inference. In that
# case, it might be useful to still emit no-member and other checks for the rest
# of the inferred objects.
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]

# Show a hint with possible names when a member name was not found. The aspect of
# finding the hint is based on edit distance.
missing-member-hint = true

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
# signature-mutators =

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# additional-builtins =

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
# allowed-redefined-builtins =

# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
# init-import =

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
#+END_SRC

**** conda - mini and ana

One of the several python package managers.

***** Disabling auto start

Annoyingly conda by default auto-starts with your shell.

#+BEGIN_SRC bash
conda config --set auto_activate_base false
#+END_SRC

*** =Emacs=
**** chemacs

[[https://github.com/plexus/chemacs2][Chemacs2 git repo]]

***** emacs-profiles.el

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.emacs-profiles.el
(("default"   . ((user-emacs-directory . "~/.my-emacs")))
 ("spacemacs" . ((user-emacs-directory . "~/.spacemacs.d")))
 ("doom"      . ((user-emacs-directory . "~/.config/doom-emacs"))))
#+END_SRC

**** DOOM

Upfront make sure that our shell can find DOOM.

#+NAME: DOOM_BASHRC
#+BEGIN_SRC bash
## Doom Emacs
export PATH="$XDG_CONFIG_HOME/doom:$PATH"
export PATH="$XDG_CONFIG_HOME/doom-emacs/bin/:$PATH"
#+END_SRC

***** Desktop Entry

Lets make a desktop entry so doom can be launched from the desktop launcher.

#+BEGIN_SRC conf :tangle ./.local/share/applications/doom-emacs.desktop
[Desktop Entry]
Type=Application
Name=Doom-Emacs
Icon=
Exec=emacs --with-profile doom
Category=Editor
#+END_SRC

***** Initialization - =init.el=
:PROPERTIES:
:header-args: :tangle ~/.dotfiles/.config/doom/init.el
:ID:       eec120ba-99e5-454e-b6df-bb942e87b537
:END:

In Doom Emacs ~init.el~ servers as the area for _module_ activation. This is a simplified form of configuration where you simply comment in/out various packages that have predefined /sane/ defaults.

****** Header
:PROPERTIES:
:ID:       87186222-09f3-4958-9e50-9b0ca6eff78a
:END:

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

****** DOOM! Input
:PROPERTIES:
:ID:       d6134a6b-7aca-45d0-baaa-45940751fa86
:END:
#+begin_src emacs-lisp

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src
****** Completion
:PROPERTIES:
:ID:       3085ca42-32ca-4f49-a8ce-8146ec26f514
:END:
#+begin_src emacs-lisp
:completion
(company +tng)           ; the ultimate code completion backend
(corfu +orderless)  ; complete with cap(f), cape and a flying feather!
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
(vertico +icons )           ; the search engine of the future
#+end_src

****** UI
:PROPERTIES:
:ID:       dbfa8a16-b468-4cc2-b3ae-b6995c1bbcee
:END:

Window select gets use =ace-window=

#+begin_src emacs-lisp
:ui
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; üôÇ
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
indent-guides     ; highlighted indent columns
;;ligatures         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
(vc-gutter +pretty) ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
window-select     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
;;zen               ; distraction-free coding or writing
#+end_src

****** Editor
:PROPERTIES:
:ID:       1383cdfe-d4bd-446e-8b6f-cd0b90965568
:END:

The evil +everywhere seems to strike a remarkably good balance between typical Emacs keybindings and vim (at least if you have a passing familiarity with both).
#+begin_src emacs-lisp
:editor
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src

****** Emacs
:PROPERTIES:
:ID:       f645eee7-6280-400f-9552-81d96bdccbf4
:END:

~eww~ = Emacs Web Wowser - it's literally a browser. I'll should try it at some point.

#+begin_src emacs-lisp
:emacs
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
;;eww               ; the internet is gross
;;ibuffer           ; interactive buffer management
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

****** Term
:PROPERTIES:
:ID:       12ef4152-de26-418b-ae16-3fe4ced88cff
:END:

I think I've only used eshell? So why not try something different.

#+begin_src emacs-lisp
:term
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

****** Checkers - syntax & spelling
:PROPERTIES:
:ID:       09d981c3-8990-4f68-b469-405e52787fc6
:END:
:BACKLINKS:
[2025-01-19 Sun 11:54] <- [[id:7c0745b0-1dc9-424d-b920-1760ad6837e7][Checkers]]
:END:

I much prefer [[*Spellcheck - ~Jinx~]] to flyspell.
Syntax is primarily flycheck although some functionality is turned off/alterted if ~lsp-ui-mode~ is turned on.

#+begin_src emacs-lisp
:checkers
syntax              ; tasing you for every semicolon you forget
;;(spell +flyspell) ; tasing you for misspelling mispelling
grammar           ; tasing grammar mistake every you make
#+end_src

****** Tools
:PROPERTIES:
:ID:       1d5eac28-143c-45bc-9d18-7b2bac8e15c4
:END:

#+begin_src emacs-lisp
:tools
;;ansible
biblio            ; Writes a PhD for you (citation needed)
;;collab            ; buffers with friends
(debugger +lsp)          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
lookup              ; navigate your code and its documentation
(lsp +peek)               ; M-x vscode
magit             ; a git porcelain for Emacs
;;make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
tree-sitter       ; syntax and parsing, sitting in a tree...
;;upload            ; map local to remote projects via ssh/ftp
#+end_src
****** Modules
:PROPERTIES:
:ID:       d2b43460-566e-4d85-b976-a5633cb2c57c
:END:

#+begin_src emacs-lisp
:os
(:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
tty               ; improve the terminal Emacs experience
#+end_src

****** Languages - Programming
:PROPERTIES:
:ID:       e404f581-9a0f-45d2-958f-6d19bb4db560
:END:

Here we enable programming languages - this applies to =prog-mode= and =org-babel-blocks=. Notice that you can add =+lsp= to configure a language server protocol.

#+begin_src emacs-lisp
:lang
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc +lsp)         ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(graphql +lsp)    ; Give queries a REST
;;(haskell +lsp)    ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
;;json              ; At least it ain't XML
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
latex             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
matlab            ; I added this
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +pandoc +noter)               ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
graphviz          ; diagrams for confusing yourself even more
;;purescript        ; javascript, but functional
(python +lsp)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src
****** Email
:PROPERTIES:
:ID:       1894fb8f-d868-48b9-b570-9ca858906068
:END:

I'm no in quite that deep yet

#+begin_src emacs-lisp
:email
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src
****** App
:PROPERTIES:
:ID:       0a11fef1-5a91-4538-b25b-a94945ec3e8b
:END:
#+begin_src emacs-lisp
:app
calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
#+end_src

****** Config
:PROPERTIES:
:ID:       2751c693-d07e-4496-95e3-a3db344ec23c
:END:

~literate~ has explicit support. Apparently this setups automatic tangle of =$DOOMDIR/config.org= to =$DOOMDIR/config.el=. This saves having to specify a file I suppose but does not provide any support for =package.el= or =init.el= (which is apparently load much earlier).

It seems like like this however is intended to work with

#+begin_src emacs-lisp
:config
;;literate
(default +bindings +smartparens)
);end DOOM!
#+end_src

***** Doctor - =doctor.el=

The ~doom doctor~ shell command can ingest ~doctor.el~ files to help diagnose issues with packages and/or config. Originally discovered and borrowed from reading [[https://tecosaur.github.io/emacs-config/config.html#config-doctor][tecosaur's config]].

#+begin_src emacs-lisp :tangle ./.config/doom/doctor.el :noweb yes
;;; doctor.el -*- lexical-bindingL t; no-byte-compile: t; -*-
<<FONT-DOCTOR>>

;; TODO - Rehome this
(if (string= (shell-command-to-string "xdg-mime query default text/org") "")
  (warn! "text/org is not a registered mime type.")
  (unless (string= (shell-command-to-string "xdg-mime query default text/org") "emacs-client.desktop\n")
    (warn! "Emacs(client) is not set up as the text/org handler.")))
(unless (executable-find "latex2text")
  (warn! "Couldn't find latex2text executable (from pylatexenc), will be unable to render LaTeX fragments in org‚Üítext exports."))
#+end_src

***** Packages       - =packages.el=
:properties:
:header-args: :tangle ~/.dotfiles/.config/doom/packages.el
:ID:       593c35e4-0d34-4945-b76a-f3c05520d5ba
:end:

I'm really just storing the header here. I think it makes sense for the package listing to go along with the package config and thus will be found down in the configuration section.

****** Header
:PROPERTIES:
:ID:       026eb2dd-abf5-4cac-ab68-19f511e81bf9
:END:

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)
#+end_src

***** Configuration  - =config.el=
:PROPERTIES:
:header-args: :tangle ~/.dotfiles/.config/doom/config.el
:ID:       cde6812f-ce92-4a0a-8369-062f2edb7ab6
:END:

****** Header
:PROPERTIES:
:ID:       e0138b53-59de-4fdd-a037-b5cfac4b4e82
:END:

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

****** Identifying Information
:PROPERTIES:
:ID:       e36764f5-eb21-4c8f-a926-e748fbd3d0ea
:END:
:BACKLINKS:
[2025-03-01 Sat 08:57] <- [[id:29b66f1c-8433-4cd5-8323-dddca0e751fc][Dotfile Management - Org-mode & Babel]]
:END:

#+begin_src emacs-lisp :noweb yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

<<my-dotfiles-vars>>

;; -- Add my personal functions early
(add-load-path!
 "my-elisp.el"
 )

;; -- Require my personal functions
;; ideally I shouldn't have to hard code this??
(require 'my-elisp "~/.dotfiles/.config/doom/my-elisp.el")

#+end_src

****** Fonts
:PROPERTIES:
:ID:       278299fb-3b55-4756-83bf-46e7a411cdcb
:END:

=Reminders=:
+ You should be able to find system fonts at ~$XDG_DATA_HOME~‚Äã/fonts.
+ You can query what fonts emacs can find with ~describe-font~ - this is also a good way to check what family names are.
+ *Call:* ~doom/reload-font~

#+begin_src emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font'                -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font'            -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font'         -- for symbols
;; - `doom-serif-font'          -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;; Fire Mono

;; ref: https://emacsredux.com/blog/2021/12/22/check-if-a-font-is-available-with-emacs-lisp/
(defun my-font-available-p (font-name)
  (find-font (font-spec :name font-name)))

(defvar my-font-size 20
  "My preferred font size")

;; -- Pick the preferred font otherwise do nothing and let Doom select it's fallbacks

;; -- Doom font
(cond
 ((my-font-available-p "Fira Mono")
  (setq doom-font (font-spec :family "Fira Mono" :size my-font-size)
        doom-big-font (font-spec :family "Fira Mono" :size 36))
  ))
;; -- Doom Variable pitch font
(cond
 ((my-font-available-p "Overpass")
  (setq doom-variable-pitch-font (font-spec :family "Overpass" :size my-font-size))
  ))
;; -- Doom Symbol font
(cond
 ((my-font-available-p "JuliaMono")
  (setq doom-symbol-font (font-spec :family "JuliaMono" :size my-font-size))
  ))
;; -- Doom Serif font
(cond
 ((my-font-available-p "IBM Plex Sans")
  (setq doom-symbol-font (font-spec :family "IBM Plex Sans" :size my-font-size))
  ))

;; ;; -- Doom emoji font
;; (setq doom-font (font-spec :family "Fira Mono" :size 20)
;;       doom-big-font (font-spec :family "Fira Mono" :size 36)
;;       doom-variable-pitch-font (font-spec :family "Overpass" :size 18)
;;       doom-symbol-font (font-spec :family "JuliaMono")
;;       doom-serif-font (font-spec :family "IBM Plex Sans" :size 22 :weight 'light)
;;       ;;      doom-emoji-font ()
;;       )

;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;;TODO: figure out per-theme overrides
;;TODO: comment-face toggle function: 1. readable vs background colout
;; -- Default is too hard to read
(custom-set-faces!
  `(font-lock-comment-face :foreground "#f5f5f5")
  )
#+end_src

_Diagnostics for the Doctor_

Dependencies:
+ ~fc-list~ - part of the XDG ~fontconfig~ system (should/probably installed by default - if not should be install-able as a system package).

#+name: FONT-DOCTOR
#+begin_src emacs-lisp
;; Emacs - Check for Prefered Fonts
;; borrowed from tecosaur:
;; https://tecosaur.github.io/emacs-config/config.html#config-doctor
(let (required-fonts available-fonts missing-fonts)
  (setq required-fonts '("Fira ?Mono.*" "Overpass" "JuliaMono" "IBM Plex Sans"))

(setq available-fonts
        (delete-dups
         (or (font-family-list)
             (and (executable-find "fc-list")
                  (with-temp-buffer
                    (call-process "fc-list" nil t nil ":" "family")
                    (split-string (buffer-string) "[,\n]"))))))

  (setq missing-fonts
        (delq nil (mapcar
                   (lambda (font)
                     (unless (delq nil (mapcar (lambda (f)
                                                 (string-match-p (format "^%s$" font) f))
                                               available-fonts))
                       font))
                   required-fonts)))
  (if available-fonts
      (dolist (font missing-fonts)
        (warn! (format "Missing font: %s." font)))
    (warn! "Unable to check for missing fonts, is fc-list installed?")))

#+end_src

****** Themes
:PROPERTIES:
:ID:       46030503-9b69-4ab3-938a-22004df0f41a
:END:

#+begin_src emacs-lisp

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

****** Modeline
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-height 35)
#+END_SRC
****** Org-mode
:PROPERTIES:
:ID:       0be0430d-bede-46a5-96b8-f9ec42891c13
:END:

#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/.notes/")
#+end_src

Adding this here to silence an annoying error:
=Symbol's function definition is void: org-eldoc-get-src-lang=
According [[https://github.com/doomemacs/doomemacs/issues/7633][this issue]] it should be resolved and yet I still run into it.
#+begin_src emacs-lisp
;; Prevents getting an annoying error
(autoload 'org-eldoc-get-src-lang "org-eldoc")
#+end_src

******* Aesthetics
:PROPERTIES:
:ID:       4e346bae-ca91-49f4-9233-5a4e11c3b07a
:END:

I prefer to hide the emphasis markers.

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-use-sub-superscripts "{}"
      )
(setopt org-pretty-entities t)
#+end_src

However, at times this can make editing certain things challenging.
But =org-appear= solves this nicely.

******** =org-appear=
:PROPERTIES:
:ID:       4fcbed90-9b55-4b66-9f58-28d25ba1f2b8
:END:

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-appear
  :recipe(:host github
          :repo "awth13/org-appear"
          )
  )
#+end_src

#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)  ; Remember: hook implies
  :config
  (setq org-appear-autoemphasis   t)  ; Show bold, italics, verbatim, etc.
  (setq org-appear-autolinks      t)  ; Show links
  (setq org-appear-autosubmarkers t)  ; Show sub- and superscripts
  )
#+end_src

******* Org-Babel

I usually want to be able to reference the org file I am working from when editing a src-bock and preferably things TAB as expected for the language.

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'reorganize-frame)
(setq org-src-tab-acts-natively t)
#+END_SRC

******** The Library of Babel

Babel blocks can be includes from other files via "the Library of Babel". To do so we must tell Emacs which file/s to use via this function:

WIP - for some reason this creates problems on initialization even though it evals fine interactively.
#+BEGIN_SRC emacs-lisp
(after! org
  ;; (org-babel-lob-ingest (expand-file-name "~/.config/doom/lib-babel.org"))
  )
#+END_SRC

#+RESULTS:
: 1

Which sets ~org-babel-library-of-babel~.

******** TODO Review some safe/sane babel default
- [[https://sachachua.com/blog/2024/12/linking-to-org-babel-source-in-a-comment-and-making-that-always-use-file-links/][Linking to Org Babel source - Sacha Chua]]

******** noweb

noweb syntax (<<block-name>>) allows for the concatenation of org-babel blocks by name. This is all well and good until "<</>>" breaks syntax highlighting for a given language.

There are two solutions to this:

1. Buffer Local Variables

   =Note=: The unicode look-up name for these symbols is MUCH LESS/GREATER.

   #+BEGIN_SRC emacs-lisp :tangle no
   # Local Variables:
   # org-babel-noweb-wrap-start: "¬´"
   # org-babel-noweb-wrap-end: "¬ª"
   # End:
   #+END_SRC

2. Overwrite the ~org-babel-noweb-wrap~ function

   Original solution was to use ¬´/¬ª because of the visual parallelism but I'm not sure how keen I am on using unicode.

   These symbols can be inserted via ~insert-character~ using either their name or unicode ID.

   ¬ª - RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK - 0000BB
   ¬´ - LEFT-POINT DOUBLE ANGLE QUOTATION MARK - 0000AB

   However, in the interest of keeping things terminal friendly I opting to just add "#" either side of the standard syntax.

  =Note=: For this to work reliably you _must_ include the ~:noweb-prefix no~ header in your babel blocks otherwise noweb will attempt to honor #comment first.

   #+BEGIN_SRC emacs-lisp
   (after! org
     ;; Note:
     (defun org-babel-noweb-wrap (&optional regexp)
       "Return regexp matching a Noweb reference.

   Match any reference, or only those matching REGEXP, if non-nil.

   When matching, reference is stored in match group 1."
       (rx-to-string
        `(and (or "<<" "#<<")
              (group
               (not (or " " "\t" "\n"))
               (? (*? any) (not (or " " "\t" "\n"))))
              (or ">>" ">>#"))))
     )
   #+END_SRC

Both solutions found here: [[https://emacs.stackexchange.com/questions/63643/noweb-references-in-sh-blocks-breaks-the-syntax-highlighting][(stackexchange)Noweb ref in sh blocks breaks syntax highlighting]]

******** ANSI colour in output
:PROPERTIES:
:ID:       b15c550d-a3d8-4fa0-96ff-9ffd33cb5a32
:END:
:BACKLINKS:
[2025-04-20 Sun 11:59] <- [[id:54061976-b2e6-4c6a-aa12-198115cd4913][SGR - Set Graphics Render]]
:END:

By default babel blocks will display ANSI control sequences literally. Sometimes this is useful other times we wish to see their results. The ~ansi-color~ library allows us to display those colours.

This isn't reliably loading on start for some reason.

#+name: hook-babel-ansi.el
#+BEGIN_SRC emacs-lisp :results silent
(after! org
  (require 'ansi-color)

  (defun my--org-babel-display-ansi-colors ()
    "Process ANSI color codes in code block results."
    (when-let ((beg (org-babel-where-is-src-block-result))
               (end (save-excursion (goto-char beg) (forward-line) (org-babel-result-end))))
      (ansi-color-apply-on-region beg end)))

  (add-hook 'org-babel-after-execute-hook 'my--org-babel-display-ansi-colors)
  )
#+END_SRC

ref: https://emacs.stackexchange.com/questions/44664/apply-ansi-color-escape-sequences-for-org-babel-results

******* Images
:PROPERTIES:
:ID:       b90d7788-1db4-4be7-a9e2-24b3e0513d76
:END:

Dealing with images in org mode really requires pixel scrolling.

#+BEGIN_SRC emacs-lisp
;; -- Images
(after! org
  (when (display-graphic-p)
    (pixel-scroll-precision-mode t)
    )
  )
#+END_SRC

******** =org-download= - screenshots

[[https://github.com/abo-abo/org-download][org-download github]]

_External dependencies_:
A screen snipping tool that you set via ~org-download-screenshot-method~.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-download
  :recipe(:host github
          :repo "abo-abo/org-download"
          :branch "master" )
  )
#+end_src

=org-download= takes much of the tedium out of inserting images into =org-mode= but does take a little tweaking to make effortless.


#+begin_src emacs-lisp :noweb yes
(after! org
  (use-package! org-download
      :bind (
             :map org-mode-map
             ("C-c d c" . org-download-clipboard)
             ("C-c d d" . org-download-delete)
             )
      ;; :hook
      ;; (
        ;;(dired-mode . org-download-enable) ;;-- this creates problems
      ;;  )
      :init
      ;; -- Formatting
      (setq org-download-image-attr-list
            '("#+attr_html: :width 80% :align center"
              "#+attr_org: :width 50%"
              "#+attr_latex: :float nil"
              )
            )
      :config
      <<org-download-config>>
      )
  )
#+end_src

It took me FAR too long to figure out how to do this correctly. I did not initially realize that org-download does file path handling internally and was trying to do it myself.

This resulted in a bizarre bug where I would get /almost/ correct paths with "Get_file_name" inserted into them.
[,[file:.assests/images/dotfiles/Get_file_name/20250116-224536_screenshot.png],]

#+name: org-download-config
#+begin_src emacs-lisp
;; -- Link Formatting
(setq org-download-link-format "[[file:%s]]\n")

;; -- Where to save the images
;; Default so that we *could* provide a file-local-var
(setq-default
org-download-method 'directory
org-download-image-dir
(if (and (buffer-file-name) (file-exists-p (buffer-file-name)))
      (concat ".assets/images/" (file-name-base (buffer-file-name)))
    nil)
;;(concat ".assests/images/" (file-name-base))
org-download-heading-lvl nil)

(setq org-download-abbreviate-filename-function #'file-relative-name)

(setq org-download-timestamp "%Y%m%d-%H%M%S_")

(setq org-download-screenshot-method
      "gnome-screenshot -a -f %sa")

;; This will remove the #+DOWNLOADED annotation
;;(setq org-download-annotate-function (lambda (_) "Return empty string" ""))
#+end_src

******** yank-media (built-in)

Org-mode has a ~yank-media~ command since 9.something. It seems to more or less achieve what ~org-download~ does. By default it uses the ~org-attach~ machinery

#+name: yank-media
#+BEGIN_SRC emacs-lisp
(after! org
  (defun get-assets-dir-path ()
    "Return path to .assets directory for current buffer. Creates the directory if it doesn't exist, prompt for confirmation."
    (interactive)
    (let ((file-path (buffer-file-name)))
      (cond
       ;; Case 1 - buffer for an unsaved file
       ((null file-path)
        (message "Buffer is not visiting a file.")
        nil)
       ;; Case 2 - file exists
       (t
        ;; Check if the .assets directory already exists
        (let* ((directory (file-name-directory file-path))
               (assets-dir (concat directory ".assets")))
          (unless (file-directory-p assets-dir)
            (if (yes-or-no-p (format "Create assets directory at %s? " assets-dir))
                (make-directory assets-dir t)
              (setq assets-dir (expand-file-name "~/.notes/assets/"))
              (message "Using default dir: %s" assets-dir))
            )
          assets-dir)))))

  (defun set-assets-dir-path ()
    (interactive)
    (let ((assets-dir (get-assets-dir-path)))
      (when assets-dir
        (customize-set-variable 'org-yank-image-save-method assets-dir))
      ))

  ;; (advice-add 'set-assets-dir-path :before #'yank-media)
  (advice-add 'yank-media :before #'set-assets-dir-path)


  ;; (customize-set-variable 'org-yank-image-save-method (expand-file-name (get-assets-dir-path)))
  ;; -- Only hardcode for debugging purposes
  (customize-set-variable 'org-yank-image-save-method (expand-file-name "~/.notes/.assets"))

  ;; org-yank-image-save-method can accept two args:
  ;; 'attach - use attach (and therefore all configuration of behaviour is done via attach)
  ;; OR a /path/to/a/dir
  (setq org-yank-dnd-method 'file-link)

  ;; org-download came with it's own Delete image at point function, yank-media does not (unless you use attach)
  ;;ref: https://www.reddit.com/r/emacs/comments/tdseci/org_how_can_i_remove_link_at_point_and_trash/
  (defun org-remove-link-and-trash-linked-file ()
    "Remove `org-mode' link at point and trash linked file."
    (interactive)
    (let* ((link (org-element-context))
           (path (org-element-property :path link)))
      (move-file-to-trash path)
      (delete-region (org-element-property :begin link)
                     (org-element-property :end link))
      ))

  (map!
   :leader
   :prefix ("i m" . "Media")
   :n :desc "Yank media" "i"  #'yank-media
   )
  (map!
   ;; :map org-mode-map
   :leader
   :prefix ("i m" . "Media")
   :n :desc "Trash org-link" "d" #'org-remove-link-and-trash-linked-file
   )
  )
#+END_SRC


******* Headings & Links
:PROPERTIES:
:ID:       7b519273-d75a-446a-86b6-e0763c79ea4c
:END:

Headings and links go together because we will assign a unique ID to every heading from which we will derive org-links. This makes the links much more resilient.

#+begin_src emacs-lisp
(after! org
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
)
#+end_src

We will also bring in =org-super-links= so that we can have automatic back links.

******** =org-super-links=
:PROPERTIES:
:ID:       4820bd7e-2be7-4536-8d04-9e0010156e53
:END:

Creates automatic backlinks when it is used to create a link. ~org-refile~ targets seemst to be the function leveraged (in the absence of helm) to find targets.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-super-links
 :recipe(:host github
         :repo "toshism/org-super-links"
         :branch "develop" )
 )
#+end_src

#+begin_src emacs-lisp
(use-package! org-super-links
  :after org
  :bind (("C-c s s" . org-super-links-link)
         ("C-c s l" . org-super-links-store-link)
         ("C-c s C-l" . org-super-links-insert-link)
         )
  )
#+end_src

******** fetching link titles

I know this will work.

#+BEGIN_SRC sh :tangle no
curl s "<title>Taming the buck with a Type III compensator</title>" | grep -oP --regexp='(?<=<title>)(.*?)(?=<\/title>)'
#+END_SRC

#+BEGIN_SRC emacs-lisp :result output :tangle no
(shell-command-to-string "curl -s https://arstechnica.com/space/2025/04/private-jets-awkward-convos-and-kazakh-vodka-my-most-memorable-interviews/ | rg -oP --regexp='(?<=<title>)(.*?)(?=<\/title>)'")
#+END_SRC

#+RESULTS:
: ‚ÄúWhat the hell are you doing?‚Äù How I learned to interview astronauts, scientists, and billionaires &#x2d; Ars Technica

May need to sanitize special characters...

ref: [[https://emacs.stackexchange.com/questions/66178/how-to-execute-shell-command-with-piping-in-elisp][(st-ex) how to execute shell command with piping in Elisp?]]

******* Export


******** (package) HTMLize

#+begin_src emacs-lisp :tangle ./.config/doom/packages.el
(package! htmlize
  :recipe (:host github
           :repo "https://github.com/hniksic/emacs-htmlize"
           :branch "stable"))
#+end_src

#+begin_src emacs-lisp
(use-package! htmlize
  :defer t
  :hook (mhtml-mode . htmlize)
  ;; TODO Other stuff?
  )
#+end_src

******* LaTeX

******** LaTeX - previews

First we configure some of the built in options for the preview mode.

#+begin_src emacs-lisp
;;(after! org
;;(use-package! org-latex-preview
;;  :after org
;;  :hook ((org-mode . org-latex-preview-auto-mode))
;;  :config
(after! org
;;(pushnew! org-latex-preview--ignored-faces 'org-list-dt 'fixed-pitch)
  (setq org-latex-preview-numbered     t
        org-startup-with-latex-preview t
        org-latex-preview-width 0.6
        org-latex-preview-processing-indicator 'face
        ;;live previewing
        org-latex-preview-live-preview-fragments t
        org-latex-preview-auto-generate 'live
        org-latex-preview-debounce 0.5
        org-latex-preview-throttle 0.2
        org-latex-preview-live-preview-fragments nil
        ;;previewing preamble
        )
  )

(after! org-src
  (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t))))
#+end_src

ref: [[https://hieuphay.com/doom-emacs-config/][Hieu Phay - My Doom Emacs Configuration - 4.1.4 Previewing LaTeX fragments]]

#+BEGIN_SRC emacs-lisp
(use-package! ox-latex
  :config
  ;; (setq org-latex-pdf-process
  ;;       '("latexmk -pdflatex='%latex -shell-escape -bibtex -interaction=nonstopmode' -pdf -output-directory=%o -f %f"))

  ;; Default packages
  (setq org-export-headline-levels 5
        org-latex-default-packages-alist
        '(("AUTO" "inputenc" t ("pdflatex" "lualatex"))
          ("T1" "fontenc" t ("pdflatex"))
          ;;Microtype
          ;;- pdflatex: full microtype features, fast, however no fontspec
          ;;- lualatex: good microtype feature support, however slow to compile
          ;;- xelatex: only protrusion support, fast compilation
          ("activate={true,nocompatibility},final,tracking=true,kerning=true,spacing=true,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("pdflatex"))
          ("activate={true,nocompatibility},final,tracking=true,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("lualatex"))
          ("protrusion={true,nocompatibility},final,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("xelatex"))
          ("dvipsnames,svgnames" "xcolor" nil)
          ("colorlinks=true, linkcolor=DarkBlue, citecolor=BrickRed, urlcolor=DarkGreen" "hyperref" nil)
          )
        )
  )
#+END_SRC

********* Engraved-faces

Engraved is the native Emac's highlighting backed that translate Emacs' font locks to LaTeX.

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! engrave-faces)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! engrave-faces
  :init
  (setq engrave-faces-themes
        '((default .
           (;; faces.el --- excluding: bold, italic, bold-italic, underline, and some others
            (default                             :short "default"             :slug "D"   :foreground "#000000" :background "#ffffff" :family "Monospace")
            (variable-pitch                      :short "var-pitch"           :slug "vp"  :foreground "#000000"                       :family "Sans Serif")
            (shadow                              :short "shadow"              :slug "h"   :foreground "#7f7f7f")
            (success                             :short "success"             :slug "sc"  :foreground "#228b22" :weight bold)
            (warning                             :short "warning"             :slug "w"   :foreground "#ff8e00" :weight bold)
            (error                               :short "error"               :slug "e"   :foreground "#ff0000" :weight bold)
            (link                                :short "link"                :slug "l"   :foreground "#ff0000")
            (link-visited                        :short "link"                :slug "lv"  :foreground "#ff0000")
            (highlight                           :short "link"                :slug "hi"  :foreground "#ff0000")
            ;; font-lock.el
            (font-lock-comment-face              :short "fl-comment"          :slug "c"   :foreground "#b22222")
            (font-lock-comment-delimiter-face    :short "fl-comment-delim"    :slug "cd"  :foreground "#b22222")
            (font-lock-string-face               :short "fl-string"           :slug "s"   :foreground "#8b2252")
            (font-lock-doc-face                  :short "fl-doc"              :slug "d"   :foreground "#8b2252")
            (font-lock-doc-markup-face           :short "fl-doc-markup"       :slug "m"   :foreground "#008b8b")
            (font-lock-keyword-face              :short "fl-keyword"          :slug "k"   :foreground "#9370db")
            (font-lock-builtin-face              :short "fl-builtin"          :slug "b"   :foreground "#483d8b")
            (font-lock-function-name-face        :short "fl-function"         :slug "f"   :foreground "#0000ff")
            (font-lock-variable-name-face        :short "fl-variable"         :slug "v"   :foreground "#a0522d")
            (font-lock-type-face                 :short "fl-type"             :slug "t"   :foreground "#228b22")
            (font-lock-constant-face             :short "fl-constant"         :slug "o"   :foreground "#008b8b")
            (font-lock-warning-face              :short "fl-warning"          :slug "wr"  :foreground "#ff0000" :weight bold)
            (font-lock-negation-char-face        :short "fl-neg-char"         :slug "nc")
            (font-lock-preprocessor-face         :short "fl-preprocessor"     :slug "pp"  :foreground "#483d8b")
            (font-lock-regexp-grouping-construct :short "fl-regexp"           :slug "rc"                        :weight bold)
            (font-lock-regexp-grouping-backslash :short "fl-regexp-backslash" :slug "rb"                        :weight bold)
            ;; org-faces.el
            (org-block                           :short "org-block"           :slug "ob") ; forcing no background is preferable
            (org-block-begin-line                :short "org-block-begin"     :slug "obb") ; forcing no background is preferable
            (org-block-end-line                  :short "org-block-end"       :slug "obe") ; forcing no background is preferable
            ;; outlines
            (outline-1                           :short "outline-1"           :slug "Oa"  :foreground "#0000ff")
            (outline-2                           :short "outline-2"           :slug "Ob"  :foreground "#a0522d")
            (outline-3                           :short "outline-3"           :slug "Oc"  :foreground "#a020f0")
            (outline-4                           :short "outline-4"           :slug "Od"  :foreground "#b22222")
            (outline-5                           :short "outline-5"           :slug "Oe"  :foreground "#228b22")
            (outline-6                           :short "outline-6"           :slug "Of"  :foreground "#008b8b")
            (outline-7                           :short "outline-7"           :slug "Og"  :foreground "#483d8b")
            (outline-8                           :short "outline-8"           :slug "Oh"  :foreground "#8b2252")
            ;; highlight-numbers.el
            (highlight-numbers-number            :short "hl-number"           :slug "hn"  :foreground "#008b8b")
            ;; highlight-quoted.el
            (highlight-quoted-quote              :short "hl-qquote"           :slug "hq"  :foreground "#9370db")
            (highlight-quoted-symbol             :short "hl-qsymbol"          :slug "hs"  :foreground "#008b8b")
            ;; rainbow-delimiters.el
            (rainbow-delimiters-depth-1-face     :short "rd-1"                :slug "rda" :foreground "#707183")
            (rainbow-delimiters-depth-2-face     :short "rd-2"                :slug "rdb" :foreground "#7388d6")
            (rainbow-delimiters-depth-3-face     :short "rd-3"                :slug "rdc" :foreground "#909183")
            (rainbow-delimiters-depth-4-face     :short "rd-4"                :slug "rdd" :foreground "#709870")
            (rainbow-delimiters-depth-5-face     :short "rd-5"                :slug "rde" :foreground "#907373")
            (rainbow-delimiters-depth-6-face     :short "rd-6"                :slug "rdf" :foreground "#6276ba")
            (rainbow-delimiters-depth-7-face     :short "rd-7"                :slug "rdg" :foreground "#858580")
            (rainbow-delimiters-depth-8-face     :short "rd-8"                :slug "rdh" :foreground "#80a880")
            (rainbow-delimiters-depth-9-face     :short "rd-9"                :slug "rdi" :foreground "#887070")
            ;; Diffs
            (diff-added       :short "diff-added"       :slug  "diffa"  :foreground "#4F894C")
            (diff-changed     :short "diff-changed"     :slug  "diffc"  :foreground "#842879")
            (diff-context     :short "diff-context"     :slug  "diffco" :foreground "#525866")
            (diff-removed     :short "diff-removed"     :slug  "diffr"  :foreground "#99324B")
            (diff-header      :short "diff-header"      :slug  "diffh"  :foreground "#398EAC")
            (diff-file-header :short "diff-file-header" :slug  "difffh" :foreground "#3B6EA8")
            (diff-hunk-header :short "diff-hunk-header" :slug  "diffhh" :foreground "#842879")
            )))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! ox-latex
  (setq org-latex-src-block-backend 'engraved)
  )
#+END_SRC

********* (package) ~org-fragtog~

Then we bring in =org-fragtog= to save from having to constantly toggle previews.

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-fragtog
    :recipe(:host github
            :repo "io12/org-fragtog")
  )
#+end_src

=Note=: ignoring errors on preview prevents =org-fragtog= from exiting if there is an error.

#+begin_src emacs-lisp
(after! org
  (use-package! org-fragtog
    :hook (org-mode . org-fragtog-mode)
    :config
    (ignore-error (org-latex-preview))
    )
  )
#+end_src

******* Images
******** (package) org-xopp

_External dependencies:_
- ~xournalpp~
- ~imagemagick: convert~

TESTING
New xournal++ integration someone posted on the DOOM discord. Would be _very nice_ to be able to draw diagrams right into an org-file.

[2024-12-14 Sat]
Doesn't seem to work. The custom link time inserts and the .xopp file is created but it doesn't seem to save correctly on something?

[2024-12-16 Mon]
There appears to be two issues:
1. It's not very smart about the .xopp file extension. It seems to be creating it's custom link from the file name you give it but fails to append a .xopp. I suspect if I append .xopp to the file name on creation I'll end up with .xopp.xopp situation.
2. It can't seem to find ~imagemagick convert~ - may have to provide it an explicit path or run doom update?

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-xopp
  :recipe(:host github
          :repo "mahmoodsh36/org-xopp"
          :files (:defaults "*.sh")
         )
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (require 'org-xopp)
  (org-xopp-setup)
  )
#+END_SRC

******* todo-keywords

=Reminder=:
(<fast-key>!)  - creates a timestamp on transition to STATE
(<fast-key>@)  - creates a note with timestamp on transition to STATE
(<fast-key>/!) - creates a note with timestamp only on transition back?

#+BEGIN_SRC emacs-lisp
	 (setq org-todo-keywords
          '(
            ;; -- General
            (sequence "TODO(t!)" "IN-PROG(i!)" "WAITING(w@/!)" "|" "DONE(d!)")
            (sequence "|" "SUBMITTED(s!)")
            (sequence "|" "CANCALLED(c@)" "DELEGATED(e!)")
            (sequence "IDEA")
            (sequence "PRJ")
            (sequence "REMINDER(!r)")
            (sequence "CALL" "|" "CALLED(!)")
            (seqeunce "EMAIL(m!)" "|" "EMAILED(!)")
            (sequence "GROC" "|" "DONE")
            ;; -- Media
            (sequence "TO-FIND" "|" "FOUND")
            (sequence "TO-READ" "|" "READ")
            (sequence "TO-WATCH" "|" "WATCHED")
            ;; -- Emacs
            (sequence "EMACS")
            (sequence "EMACS-PACKAGE")
            (sequence "EMACS-CONFIG")
            )
          )

    (setq org-todo-keyword-faces
          '(("TODO"      . ( :foreground "red"          :weight bold))
            ("IN-PROG"   . ( :foreground "orange"       :weight bold))
            ("WAITING"   . ( :foreground "yellow"       :weight bold))
            ("DONE"      . ( :foreground "green"        :weight bold))
            ("IDEA"      . ( :foreground "deepskyblue1" :weight bold))
            ("CANCELLED" . ( :foreground "gray"         :weight bold))
            ("TO-FIND"   . ( :foreground "yellow1"      :weight bold))
            ("EMACS"     . ( :foreground "purple"       :weight bold))
            ("PRJ"       . ( :foreground "orange2"
            :weight bold))
      )
    )
#+END_SRC

******* Agenda

#+begin_src emacs-lisp :noweb yes
(after! org
  (setq org-log-done 'time)
  (setq org-log-note-clock-out t)
  (setq org-log-into-drawer "LOGBOOK") ; places state transitions into LOGBOOK drawer

  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator #x2501
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)
  ) ; after! org
#+end_src

******** Custom Agenda Commands - Not used

_Currently not used due to gremlins_

All customer agenda commands can be created through the ~org-agenda-custom-commands~ variable. These commands will appear at the bottom of the agenda in their listed order.

The syntax for creating these commands is:
(key desc type match settings files)

Type can take numerous predefined symbols or a user-defined function.


#+name: org-agenda-custom-commands
#+begin_src emacs-lisp
(after! org-agenda
  (setq org-agenda-custom-commands
        '(
          ;; Tag based commands
          ("u" "Untagged Tasks" tags-todo "-{.*}")
          ("p" "Planning" tags-todo "+@planning" ((org-agenda-overriding-header "Planning Tasks")))
          ;; Specific file based commands
        ;;; Capture file
        ;;; WIP - not working as of 2024-01-12
          ;;   ("c" "Capture File" (
          ;;                     (todo ".*" (org-agenda-overriding-header "Unprocessed Capture Items"))
          ;;                     )
          ;; (org-agenda-files '("~/.notes/capture.org"))
          ;; )
          ("c" "Capture File" (
                               ;; Unprocessed todo items
                               (todo ".*" ((org-agenda-files '("~/.notes/capture.org"))
                                           (org-agenda-overriding-header "Unprocessed Capture Items")))
                               ))
          ;; -- Work
          ("f" "Weekly DONE" (
                              (agenda "" ((org-agenda-overriding-header "Tasks Completed:")
                                          (org-agenda-skip-function '(org-agenda-skip-subtree-if 'nottodo 'done))
                                          (org-agenda-skip-scheduled-if-done nil) ;; don't search scheduled
                                          (org-agenda-skip-timestamp-if-done nil) ;; don't search
                                          (org-agenda-span 7)
                                          (org-agenda-use-time-grid nil)
                                          (setq org-agenda-show-all-dates nil)
                                          ))
                              ))
          ;; ("f" "Weekly DONE and IN-PROGRESS from this week"
          ;;  (agenda ""
          ;;          ((org-agenda-overriding-header "Tasks from this Week")
          ;;           (org-agenda-span 'week)
          ;;           (org-agenda-start-on-weekday 1) ;; Start on Monday
          ;;           (org-agenda-use-time-grid nil)
          ;;           (org-agenda-skip-function
          ;;            (org-agenda-skip-subtree-if 'todo '("DONE" "IN-PROGRESS")))
          ;;           (org-agenda-show-all-dates nil)
          ;;           (org-agenda-skip-scheduled-if-done nil)
          ;;           (org-agenda-skip-timestamp-if-done nil)
          ;;           (org-agenda-start-day "Mon")
          ;;           ))
          ;;  )
          ;;--
          )
        )
  )
#+end_src

******** (package) org-super-agenda

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! org-super-agenda
  :recipe(:host github
          :repo "/alphapapa/org-super-agenda"
          )
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-super-agenda-grousp
        '(
          (:name "Planning"
           :tag "planning"
           )
          (:name "Today"  ; Optionally specify section name
           :time-grid t  ; Items that appear on the time grid
           :todo "TODAY")  ; Items that have this TODO keyword
          )
        )
  (org-super-agenda-mode)
  )
#+END_SRC

******* Capture

******** Templates

Relevant documentation:
- [[https://orgmode.org/manual/Template-expansion.html][Org capture template expansion]]
- [[https://orgmode.org/manual/Template-elements.html][Org capture template elements]]
- [[https://orgmode.org/manual/Templates-in-contexts.html][Org capture templates in context]]

#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/.notes/capture.org")
           "* TODO %?\n  %i\n"
           :empty-lines-after 1)
#+end_src

"Life" related things.

#+begin_src emacs-lisp
;; -- Life
("l" "Life")
("lt" "Todo" entry (file "~/.notes/agenda-life.org")
 "* TODO %?\n\n\t SCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
("lr" "Reminder" entry (file "~/.notes/agenda-life.org")
 "* REMINDER %?\nSCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
("lg" "Grocery" entry (file "~/.notes/grocery.org")
 "* GROC %^{item}\n\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
;;
#+end_src

School related capture groups.

#+begin_src emacs-lisp
;; -- School
("s" "School")
("sa" "Assignment" entry (file+headline "~/.notes/agenda-school.org" "Spring 2025")
 "* TODO %^{ECE441|ENGR297|ENGR446} - %^{Assignment|Worksheet} %^{#} \nSCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
("se" "Exam" entry (file+headline "~/.notes/agenda-school.org" "Spring 2025")
 "* TODO %^{ECE441|ENGR297|ENGR446} - %^{Quiz|Midterm|Final} \nSCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
("sr" "Reading" entry (file+headline "~/.notes/agenda-school.org" "Spring 2025")
 "* TODO %^{ECE441|ENGR297|ENGR446} - %^{Reading} - %^{Chapter|Pages|Section} \nSCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)

;; ("sl" "499 log" entry (file+headline "~/.notes/agenda-school.org" "work-log")
;;  "* TODO %^{ECE441|ENGR297|ENGR446} - %^{Reading} - %^{Chapter|Pages|Section} \nSCHEDULED: %^t DEADLINE: %^t\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
;;  :empty-lines-after 1 :prepend t)

#+end_src

If I am honest with myself I am terrible at remembering to journal. But maybe! just maybe. I will someday.

#+begin_src emacs-lisp
;; -- Journal
("j" "Journal" entry (file+olp+datetree "~/.notes/journal.org")
 "* %U \n %?%i \n"
 :empty-lines-after 1)
#+end_src

#+begin_src emacs-lisp
("b" "Bookmark" entry (file "~/.notes/bookmarks.org")
 "* [[%x][%^{name}]] %^g\n:PROPERTIES:\n:CREATED: %U\n:END:")
#+end_src

Capture grouping for media to follow up on: Movies, books, podcasts, etc.

#+begin_src emacs-lisp
("m" "Media")
("mm" "Movie" entry (file+headline "~/.notes/media.org" "Movies")
 "* TO-FIND Movie - %^{Title}\n:PROPERTIES:\n\t:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
("mb" "Book" entry (file+headline "~/.notes/media.org" "Books")
 "* TO-FIND Books - %^{Title}\n:PROPERTIES:\n\t:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
("mp" "Pocast" entry (file+headline "~/.notes/media.org" "Podcasts")
 "* TO-FIND Podcast - %^{Title}\n:PROPERTIES:\n\t:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1)
#+end_src

_Emacs related_

These capture groups need to be better defined and expanded:
- Make use of %a (annotation - ~org-store-link~)
- Make use of the [[https://orgmode.org/manual/The-capture-protocol.html][capture protocol]]

#+begin_src emacs-lisp
;; -- Emacs
("e" "Emacs")
;; -- A Package to consider
("ep" "Emacs Package" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS-PACKAGE - %^{Package name}\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
;; -- A Package to consider with a link (assumed to be a web link)
("ew" "Emacs Package with link" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS-PACKAGE - %^{Package name}%^g\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n[[%x][%^{Link description}]]\n%?"
 :empty-lines-after 1 :prepend t)
;; -- Configuration to perform
("ec" "Emacs Config" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS-CONFIG Org-mode - %^{Config}%^g\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
;; -- Config to perform with link (assumed to be a file system link)
("ei" "Emacs Config Link" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS-CONFIG Org-mode - %^{Config}\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?\n%a"
 :empty-lines-after 1 :prepend t)
;; -- Emacs lisp to write
("el" "Emacs TODO" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS-LISP %^{Title}\n\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n"
 :empty-lines-after 1 :prepend t)
;; -- Programming
("p" "Programming")
("pe" "Emacs TODO" entry (file+headline "~/.notes/emacs.org" "Improvements")
 "* EMACS %^{Title}\n\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n %a"
 :empty-lines-after 1)
#+end_src

_Work related_

#+begin_src emacs-lisp
;; -- Work
("w" "Work")
("wt" "Work TODO" entry (file+headline "~/.notes/work-agenda.org" "Tasks")
 "* TODO %^{Poject Name} - %^{Task description}\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
("wn" "Work Note" entry (file+headline "~/.notes/work-agenda.org" "Improvements")
 "* NOTE %^{Note Title} - %^{Note Description}\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
("wi" "Issue" entry (file+headline "~/.notes/work-agenda.org" "Improvements")
 "* ISSUE %^{Issue name} - %^{Issue description}\n:PROPERTIES:\n:CREATED:\t%U\n:END:\n%?"
 :empty-lines-after 1 :prepend t)
#+end_src

This one is purely for testing purposes.

#+begin_src emacs-lisp
;; -- Test
("z" "Test capture" entry (file "~/.notes/test.org")
 "* TODO %^{PROMPT|Test1|Test2|Test3}\n\%?"
 :empty-lines-after 1)
))
)
#+end_src

******** Refile

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-default-notes-file "~/.notes/capture.org")
  (setq org-refile-targets
        '((nil :maxlevel . 6)
          (org-agenda-files :maxlevel . 6))
        )
  )
#+END_SRC

****** Advice - not the lisp kind
:PROPERTIES:
:ID:       dee6c3f1-dbf7-4779-a99e-474307a05220
:END:

#+begin_src emacs-lisp
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

****** Personal configuration
:PROPERTIES:
:ID:       bc3712a0-0ad7-4222-a7a2-ecf26e7ff98b
:END:

#+begin_src emacs-lisp
;; -- Personal Configuration ------------------------------------------------------------------
#+end_src

******* Input
:PROPERTIES:
:ID:       7986cf2a-a721-497d-9c12-0341519d194e
:END:
******** (package) =avy= - Jump with a tree!
:PROPERTIES:
:ID:       830da1ca-97fb-438f-a2af-e63fb4854aca
:END:

From ~:config default~

Usage observations:
1. =-goto-word-0= ignores characters such as ). =-goto-word-1= does not have this limitation since you specify the leading character.

I suspect that I won't end up wanting to use =-goto-word-=. I think usually if I want to go to a

#+begin_src emacs-lisp
;;-- Avy
  (map!
   :after avy
   :leader
   :n
   "s w" #'avy-goto-word-1
   :desc "Jump to a word!"
   ;;#'avy-goto-line
   )
#+end_src

Doom seems to use =Avy= under the following binding:

_Normal mode_
=g s SPC=

But if I query this via =SPC h k= Doom informs me that "This lambda is an interactive function" BUT does list ~evil-motion-state-map~ under "Key Bindings" which does include a number of ~avy~ functions.

******* Project.el

You can set porject "indicator" files like this (by default it uses VC files to "guess"):
#+BEGIN_SRC emacs-lisp :tangle no
(use-package project
  :config
  (setq project-vc-extra-root-markers '(".project" "CMakeLists.txt"))
  )
#+END_SRC

******** WireViz

******* Projectile.el

#+BEGIN_SRC emacs-lisp :tangle no :noweb yes
(use-package! projectile
  :config
  <<projectile-mode-line>>
  <<projectile-per-prj-buffers>>
    )
#+END_SRC

Doom seems to use ~projectile~ by default so I will go with that for now.
You can use ~projectile-discover-projects-in-directory~ to "find" projects interactively.

When it finds one of those it adds the directory to your project index which you can query via ~projectile-switch-project~ (~SPC p p~).

Once _inside a project dir_ you can query a list of it's files with ~projectile-find-file~ (~SPC SPC~).

You can also specify projectile's search paths:
#+BEGIN_SRC emacs-lisp :tangle no
(projectile-project-search-path '("~/path/to/prj"))
#+END_SRC
~projectile-project-search-path~

The modeline can be set like so (it won't work for TRAMP however):
#+name: projectile-mode-line
#+BEGIN_SRC emacs-lisp
(setq projectile-mode-line-function '(lambda () (format " Proj[%s]" (projectile-project-name))))
#+END_SRC

******** Generic Project Override Functions

The following functions can be configured to perform project specific actions.

projectile -configure-project
           -configure-project
           -run-project
           -test-project
           -install-project
           -package-project

These commands use output buffers that are _shared_ \therefore if called by different projects the results will intermix. You may want to make the output buffers project specific:

#+name: projectile-per-prj-buffers
#+BEGIN_SRC emacs-lisp
(setq projectile-per-project-compilation-buffer t)
#+END_SRC

******* Completion
:PROPERTIES:
:ID:       dc64093f-f5cd-476b-9fec-c243408e3839
:END:
******** (package) Consult
:PROPERTIES:
:ID:       d543f813-c091-460c-83ab-3857345cb107
:END:

Although consult is included in the Doom completion module many of the key bindings recommend on consult's github are not set.

=Note=: ~:map 'override~ is necessary for 'M-s' since this is already bound to isearch by default. Without it you will encounter an error.

#+begin_src emacs-lisp
;; -- Consult --
  (map!
   :after consult
   ;; 'mode-specific-map'
   :prefix "C-c"
   "M-x"   #'consult-mode-command
   "h"     #'consult-history
   "k"     #'consult-kmacro
   "m"     #'consult-man
   "i"     #'consult-info
   :map 'Info-mode-map :desc "Consult info search" [remap Info-search] #'consult-info
   ;; C-x bindings in `ctl-x-map'
   :prefix "C-x"
   "M-:"   #'consult-complex-command     ;; orig. repeat-complex-command
   "b"     #'consult-buffer              ;; orig. switch-to-buffer
   "4 b"   #'consult-buffer-other-window ;; orig. switch-to-buffer-other-window
   "5 b"   #'consult-buffer-other-frame  ;; orig. switch-to-buffer-other-frame
   "t b"   #'consult-buffer-other-tab    ;; orig. switch-to-buffer-other-tab
   "r b"   #'consult-bookmark            ;; orig. bookmark-jump
   "p b"   #'consult-project-buffer      ;; orig. project-switch-to-buffer
   ;; Custom M-# bindings for fast register access
   "M-#"   #'consult-register-load
   "M-'"   #'consult-register-store          ;; orig. abbrev-prefix-mark unrelated
   "C-M-#" #'consult-register
   ;; Other custom bindings
   "M-y"   #'consult-yank-pop                ;; orig. yank-pop
   ;; M-g bindings in `goto-map'
   :prefix "M-g"
   "e"     #'consult-compile-error
   "f"     #'consult-flycheck               ;; Alternative: consult-flyamake
   "g"     #'consult-goto-line             ;; orig. goto-line
   "M-g"   #'consult-goto-line           ;; orig. goto-line
   "o"     #'consult-outline               ;; Alternative: consult-org-heading
   "m"     #'consult-mark
   "k"     #'consult-global-mark
   "i"     #'consult-imenu
   "I"     #'consult-imenu-multi
   ;; M-s bindings in `search-map'
   :map 'override
   :prefix "M-s"
   "d"     #'consult-find                  ;; Alternative: consult-fd
   "c"     #'consult-locate
   "g"     #'consult-grep
   "G"     #'consult-git-grep
   "r"     #'consult-ripgrep
   "l"     #'consult-line
   "L"     #'consult-line-multi
   "k"     #'consult-keep-lines
   "u"     #'consult-focus-lines
   ;; Isearch integration
   "e"     #'consult-isearch-history
   :map isearch-mode-map
   "M-e"   #'consult-isearch-history         ;; orig. isearch-edit-string
   "e"     #'consult-isearch-history       ;; orig. isearch-edit-string
   "l"     #'consult-line                  ;; needed by consult-line to detect isearch
   "L"     #'consult-line-multi            ;; needed by consult-line to detect isearch
   ;; Minibuffer history
   ;; :map 'override
   ;; :map minibuffer-local-map
   ;; "M-s"   #'consult-history                 ;; orig. next-matching-history-element
   ;; "M-r"   #'consult-history                ;; orig. previous-matching-history-element
   )
#+end_src
******** (package) which-key

~which-key~ is used by default in DOOM. Ideally I would like to add my own labels to prefix menus and such but so far I have not been able to figure out how to do so.

If you wish to consult a key map:
src_emacs-lisp{(which-key-show-keymap 'doom-leader-map)}

#+BEGIN_SRC emacs-lisp :tangle no
;; (after! which-key
;;   (setq which-key-add-column-padding 1
;;         which-key-max-display-columns nil
;;         which-key-min-display-lines 6
;;         which-key-sort-order 'which-key-prefix-then-key-order)
;;   ;; ;; Rename prefixes
;;   ;; (which-key-add-key-based-replacements
;;   ;;   doom-leader-key '("leader" . "Leader Key")
;;   ;;   (concat doom-leader-key " n") '("notes" . "Notes")
;;   ;;   (concat doom-leader-key " p") '("project" . "Project"))
;;   )
#+END_SRC

******* UI
:PROPERTIES:
:ID:       22264d97-086c-45ca-b36b-7864ef1ae3f8
:END:
******** =ace-window=
:PROPERTIES:
:ID:       ad06a87a-e099-42dc-ac8e-b6621cc8d9bc
:END:

=ace-window= is installed by default presumably Doom is making some optimized choice for loading it. If I =:defer t= my keybindings don't take effect until ace is called at least once.

Perhaps I shouldn't be using =use-package!= with module packages? I'm missing something clearly.

#+begin_src emacs-lisp
(use-package! ace-window
  :config
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 2.5 :box (:line-width 10 :color "red"))
  (map! :map global-map
        "M-o" #'ace-window)

  )
#+end_src
******** =rotate=

Ro-ro-rotate yer windows.
This actually seems to be handled by the ~evil-rotate-...~ commands (SPC w ...).

Possible alternative that allows setting predefined layouts:
#+begin_src emacs-lisp :tanlge .config/doom/packages.el
;; (package! rotate
;;   ;:pin "4e9ac3ff800880bd9b705794ef0f7c99d72900a6"
;;   )
#+end_src

******** =olivetti= - named for a [[https://en.wikipedia.org/wiki/Olivetti][typewriter]]

[2024-11-17 Sun] - adding olivetti for a test drive

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! olivetti
  :recipe(:host github
          :repo "rnkn/olivetti"
          )
  )

(package! auto-olivetti
  :recipe(:host sourcehut
          :repo "ashton314/auto-olivetti"
          )

  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! olivetti
:config
(setq-default olivetti-body-width 180)
)

(use-package! auto-olivetti
:custom
(auto-olivetti-enabled-modes '(text-mode prog-mode helpful-mode ibuffer-mode image-mode))
:config
(auto-olivetti-mode)
)
#+END_SRC

******* Editor
:PROPERTIES:
:ID:       4779b83a-6887-415e-8611-511568f4e37d
:END:
******** yasnippet
:PROPERTIES:
:ID:       ced94036-8aaa-4e7c-ad82-7ed66507c291
:END:

[[https://github.com/joaotavora/yasnippet][yasnippet github]]

#+begin_src emacs-lisp
(use-package! yasnippet
  :defer t
  :config
  ;; (setq-default yas-snippet-dirs `(,(expand-file-name "snippets/"
  ;;  user-emacs-directory)))
  ;;
  (add-to-list 'yas-snippet-dirs "~/.config/doom/snippets"
               )
  )
#+end_src

Some keybinding is necessary to ensure that snippets can be navigated as expected (with tab). Fix found on [[https://github.com/doomemacs/doomemacs/issues/7733][on this github issue.]]

#+begin_src emacs-lisp
(map!
 :map org-mode-map
 :after yasnippet ;; Retain org-mode's native TAB functionality but allow yas-expand when a snippet is available
 :nvi [tab] yas-maybe-expand
 ;; Optionally, bind other keys for snippet navigation
 ;;:nvi "C-c n" #'yas-next-field
 ;;:nvi "C-c p" #'yas-prev-field
 )
#+end_src

******** whitespace-mode

Doom's whitespace-mode is quite minimal. Should you need it to make other forms of white space apparent here is some sample config.

#+begin_src emacs-lisp

;; (use-package! whitespace
;;   :config
;;   (setq
;;     whitespace-style '(face tabs tab-mark spaces space-mark trailing newline newline-mark)
;;     whitespace-display-mappings '(
;;       (space-mark   ?\     [?\u00B7]     [?.])
;;       (space-mark   ?\xA0  [?\u00A4]     [?_])
;;       (newline-mark ?\n    [182 ?\n])
;;       (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))
;;   (global-whitespace-mode +1))
#+end_src

******* Emacs
:PROPERTIES:
:ID:       bc76542f-8df5-426f-89fd-912c4858c88d
:END:
******** TRAMP

Tramp usually defaults to looking for ~/bin/sh~ (sshx too).
ref:
- [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-shell-setup.html][(gnu) 4.18 Remote shell setup hints]]

Most of the time bash would be prefered.

#+begin_src emacs-lisp
(after! tramp
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "/sshx:lbrinston@ugls5:")
                   "remote-shell" "/usr/local/bin/"))
)
#+end_src

******* Term
:PROPERTIES:
:ID:       dd238e55-ce08-4a6f-9853-026eb704c563
:END:
******* Checkers
:PROPERTIES:
:ID:       7c0745b0-1dc9-424d-b920-1760ad6837e7
:END:

Personal configuration for language checkers. Some of these are enabled in [[id:09d981c3-8990-4f68-b469-405e52787fc6][Checkers - syntax & spelling]] (such as Languagetool)

******** Spellcheck - ~Jinx~
:PROPERTIES:
:ID:       9c33fa62-801d-4c8d-8360-1f2d8f35ccea
:END:

[[https://github.com/minad/jinx][Jinx github]]
External dependencies:
- libenchant-2-dev
- pkgconf

#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! jinx)
#+end_src

#+begin_src emacs-lisp
(use-package! jinx
  :defer t
  :hook (text-mode . jinx-mode)
  :bind (("M-$"   . jinx-correct)
         ("C-M-$" . jinx-languages)
         )
  ;;:config
  ;; consider setting jinx-exclude-faces
  )
#+end_src
******** Languagetool

Languagetool is a FOSS alternative to grammarly and needs to be installed manually for Doom to be able to instrument it. It seems to use a Client-Server model and on Linux has to be installed via bash script (see: [[https://github.com/languagetool-org/languagetool][Languagetool github]])

******** Writegood

[[https://github.com/bnbeckwith/writegood-mode][Writegood-mode github]]

#+BEGIN_SRC emacs-lisp
(use-package! writegood-mode
  :hook (org-mode . writegood-mode)
  :config
  ;; Personal Weasel words
  ;; (setq personal-weasel-words
  ;;       '("")
  ;;       )
  ;;(setq writegood-weasel-words (concat write-good-weasel-words personal-weasel-words))
   ;;  (map!
   ;; :prefix
   ;; )

  (set-face-attribute 'writegood-weasels-face nil
                      ;; white weasel (ermine)
                      :underline '(:style wave :color "white")
                      :slant 'italic
                      )
  (set-face-attribute 'writegood-passive-voice-face nil
                      ;; white weasel (ermine)
                      :underline '(:style wave :color "CadetBlue1")
                      )
  (set-face-attribute 'writegood-duplicates-face nil
                      ;; white weasel (ermine)
                      :underline '(:style wave :color "maroon1")
                      )
  )
#+END_SRC

Ref:
- [[https://randomgeekery.org/post/2017/08/emacs-writegood-mode/][Emacs-Writegood-mode]]
- [[http://xahlee.info/emacs/emacs_manual/elisp/Face-Attributes.html][XahLee - Face Attributes]]

******* Tools
:PROPERTIES:
:ID:       8fc6d989-9c17-42da-a718-34ce6aa02a5d
:END:

******** Bibilio

#+BEGIN_SRC emacs-lisp
;; biblio
(after! citar
  (setq! citar-bibliography '("~/Documents/references/references.bib"))
  ;(setq! citar-library-paths '("~/references/library/files"))
  ;(setq! citar-notes-paths '("~/references/notes"))
  )
#+END_SRC

******* OS
:PROPERTIES:
:ID:       4754f677-9c26-40f8-bfec-e34d1276b01c
:END:
******* Languages
:PROPERTIES:
:ID:       45e35db0-e9e0-45c8-997d-5971eb581bff
:END:
******** Debugging
#+begin_src emacs-lisp
;; -- General dap-mode --
(after! dap-mode
  (dap-ui-mode 1)
  (dap-tooltip-mode 1) ; This does not seem to work
  ;;(tooltip-mode 1)                      ; Tooltip hover - otherwise minibuffer
  (map! :map dap-mode-map
        :leader
        :prefix "d"
        "n"   #'dap-next
        "i"   #'dap-step-in
        "o"   #'dap-step-over
        "c"   #'dap-continue
        "a"   #'dap-breakpoint-toggle
        )
  )
#+end_src
******** Matlab

There is a [[https://github.com/MathWorks/Emacs-MATLAB-Mode][Emacs MATLAB-mode]] that can be installed via MELPA and is maintained from someone at Mathworks. It mostly works although I never got the linter working quite right.

#+BEGIN_SRC emacs-lisp :tangle ~/.dotfiles/.config/doom/packages.el
(package! matlab-mode
  :recipe(:type git
          :host github
          :repo "mathworks/Emacs-MATLAB-Mode")
  )
#+END_SRC

In addition to the package a decent chunk of config is require and more or less pasted straight off the github.

#+BEGIN_SRC emacs-lisp
(use-package! matlab
  :config
  ;; associate .m file with the matlab-mode (major mode)
  (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))

  ;; setup matlab-shell
  ;; swap out for symlink in /usr/local/bin
  (setq matlab-shell-command "/usr/local/bin/matlab")
  ;;  (setq matlab-shell-command "/usr/local/MATLAB/R2023a/bin/matlab")
  (setq matlab-shell-command-switches (list "-nodesktop" "-nosplash"))

  (setq matlab-indent-function t)
  ;; setup mlint for warnings and errors highlighting
  ;; (setq add-to-list 'mlint-programs "/usr/local/MATLAB/R2023a/bin/glnxa64/mlint") ;; add mlint program for Linux
  (setq org-babel-default-header-args:matlab
        '((:session . "*MATLAB*")))


  (defun matlab-org-session-advice (orig-fun &rest args)
    "Advice for org to reuse the *MATLAB* buffer"
    ;; ob-octave.el leverages both org-babel-matlab-emacs-link-wrapper-method and
    ;; org-babel-octave-wrapper-method when interacting with the *MATLAB* buffer.
    ;; Here we fix a couple items such as adding cd default-directory:
    (setq org-babel-matlab-emacs-link-wrapper-method
          (concat "\
    cd('" default-directory "');
    %s
    if ~exist('ans','var') ans=''; end
    if ischar(ans), fid = fopen('%s', 'w'); fprintf(fid, '%%s\\n', ans); fclose(fid);
    else, save -ascii %s ans
    end
    delete('%s')
    "))
    (setq org-babel-octave-wrapper-method
          (concat "\
    cd('" default-directory "');
    %s
    if ~exist('ans','var') ans=''; end
    if ischar(ans) || isstring(ans), fid = fopen('%s', 'w'); fprintf(fid, '%%s\\n', ans); fclose(fid);
    else, dlmwrite('%s', ans, '\\t')
    end"))
    (apply orig-fun args))

  (defun matlab-org-fixup-print (orig-fun session body result-type &optional matlabp)
    "Fixup figure print to make it work with MATLAB"
    ;; org 9.3 correctly does:     print -dpng figure.png
    ;; org 9.6.1 incorrectly does: print -dpng "figure.png"
    ;; and thus 9.6.1 creates on disk a file name containing quotes which is incorrect, so this
    ;; advice fixes that.
    (setq body (replace-regexp-in-string "^\\(print -dpng \\)\"\\([^\"]+\\)\"" "\\1\\2"  body t))
    (funcall orig-fun session body result-type matlabp))

  (defun org-export-dispatch-no-babel-advice (orig-fun &rest args)
    "Instruct babel to not evaluate code blocks (and hence no
prompt) during export, e.g. conversion of org to say html."
    (let* ((org-babel-default-header-args
            (cons '(:eval . "never-export") org-babel-default-header-args))
           (result (apply orig-fun args)))
      result))

  (eval-after-load 'ox
    '(progn
       ;; Make C-c C-e `org-export-dispatch' work without prompting to evaluate code blocks
       (advice-add 'org-export-dispatch :around #'org-export-dispatch-no-babel-advice)))

  ;; org babel for matlab - make all matlab code blocks execute in the same *MATLAB* session
  (eval-after-load "org"
    '(progn
       (advice-add 'org-babel-octave-evaluate-external-process :around #'matlab-org-session-advice)
       (advice-add 'org-babel-octave-evaluate-session :around #'matlab-org-session-advice)
       (advice-add 'org-babel-octave-evaluate :around #'matlab-org-fixup-print)))
  ;; src: https://github.com/mathworks/Emacs-MATLAB-Mode/blob/default/examples/matlab-and-org-mode/matlab-and-org-mode.org

  )
#+END_SRC
******** Python

#+BEGIN_SRC emacs-lisp
;; -- Python -- ;;
#+END_SRC

_Formatting_
~apheleia-mode~ seems to be Dooms first choice for formatting. This mode seems to be a hack to get formatters like python's [[https://black.readthedocs.io/en/stable/index.html][Black]] to not interrupt or move your cursor buuut there seems to be an issue certain formatting errors breaking it (such as tabs instead of spaces?).

I've yet to resolve this annoyance.

If you wish to change the formatter or otherwise configure Black via commandline args:

#+BEGIN_SRC emacs-lisp
;; (after! python-mode
;;   (setq-hook! 'python-mode-hook +format-with 'black)
;;  (set-formatter! 'black '("black" "-") :modes '(python-mode))
;;   )
#+END_SRC

_Linting_
Doom seems to handle this by setting a checker for ~flycheck~. ~flycheck~ provides some useful functions for checking your configuration and checker such as:
~flycheck-verify-setup~
~flycheck-verify-checker~

External dependencies:
- ~pylint~ (obvs)

External config:
- ~pylint~ expects a config file ([[https://pylint.pycqa.org/en/latest/user_guide/configuration/index.html][see]]).

A ~.pylintrc~ can easily be created like this:

#+BEGIN_SRC shell :tangle no
pylint --generate-rcfile > ${HOME}/.config/pylintrc/.pylintrc
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; -- Linting
;; (add-hook 'python-mode-hook #'(lambda () (setq flycheck-checker 'python-pylint))) ;
;;(setq flycheck-python-pylint-args '("--py-version=3.10"))

#+END_SRC

_Language Server Protocol (LSP)_

External Dependencies:
- An LSP obviously

The [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][LSP-mode docs]] recommend you do the following:

#+BEGIN_SRC shell :tangle no
pip install 'python-lsp-server[all]'
#+END_SRC

#+begin_src emacs-lisp
;; -- Formatting
(after! lsp-mode
  ;; (setq lsp-pylsp-plugins-yapf-enabled t)
  ;; (setq lsp-pylsp-plugins-autopep8-enabled t)
  ;; (setq lsp-pylsp-plugins-black-enabled nil)
  )  ;; Disable LSP indentation
#+end_src

_Debugging - DAP-mode_

=DAP-mode= seems to be Doom's first choice for a DAP-debugger. It's very VS-codey which is fine but a bit clunky in emacs (ex. the clickable debugger UI seems to mostly not work correctly - requiring double clicks to work at all for stepping??).

=Note:= for =dap-mode= to function in doom the ~debugger~ module must be given the ~+lsp~ flag (switch?).

#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy)
  (setq dap-python-executable "python3")
  (setq dap-print-io t)
  (setq dap-python-debugger-break-on-exception t)
#+end_src

=dap-mode= does allow for predefining of ~.jsonrpc~ templates which is nice. I should spend some time reviewing the useful fields in these.

#+begin_src emacs-lisp
(dap-register-debug-template
 "Debug Server"
 (list :type "python"
       :args "-i"
       :cwd nil
       :env '(("DEBUG" . "1"))
       :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
       :request "launch"
       :name "My App"))
)
#+end_src
******** C and C++

For c and cpp make use of eglot and clangd. See:[[https://rgoswami.me/posts/emacs-lang-servers/][Doom Emacs and Language Servers]]

#+begin_src emacs-lisp
(after! eglot
  :config
  (set-eglot-client! 'cc-mode '("clangd" "-j=3" "--clang-tidy" "/.local/lsp/bin/")) ;; clangd
  ;; -- Per machine lsp locations
  (when (string= (system-name) "terra")
    (setq exec-path (append exec-path `(
                                        (concat(getenv "HOME"))
                                        ))))
  )
#+end_src
******* Email
:PROPERTIES:
:ID:       0a7e277f-b7ae-423f-9e70-c305be171ea2
:END:
******* App
:PROPERTIES:
:ID:       c305d54c-7cf4-4cad-a164-abd895e4e1f7
:END:
******* Config
:PROPERTIES:
:ID:       33b70c93-080d-40a0-902c-be7479cf0872
:END:

***** Personal Elisp - =my-elisp.el=
****** Structure

#+begin_src emacs-lisp :noweb yes :tangle ~/.dotfiles/.config/doom/my-elisp.el
;;; my-elisp.el --- Description -*- lexical-binding: t; -*-
;;
;; Author: Me T-T
;; Maintainer: Me T-T
;; Created: March 01, 2025
;; Modified: March 01, 2025
;; Version: 0.0.1
;; Package-Requires: ((emacs "24.3"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  Description
;;
;;; Code:

<<my--scan-for-output-files>>
<<test-scan>>

(provide 'my-elisp)
;;; my-elisp.el ends here
#+end_src
****** Yoinking font properties

#+BEGIN_SRC emacs-lisp :tangle no
(defun copy-face-color-at-point ()
  "Copy the foreground color of the face at point to the kill ring."
  (interactive)
  (let* ((face (get-text-property (point) 'face))
         ;; Sometimes, faces are lists!
         (color (if (listp face)
                    ;; So if they are, create an alist of face:foreground
                   (mapcar (lambda (f) (cons f (face-attribute f :foreground))) face)
                  ;; Otherwise, just one face so grab the :foreground from the face
                 (face-attribute face :foreground))))
    ;; Yoink it to the kill ring.
    (kill-new (format "%s" color))
    ;; Make it clear everything went according to plan.
    (message "Copied to kill ring: %s" color)))

;; Give it a hotkey
(map!
 :leader
 (:prefix ("c" . "code")
  :desc "Copy face color at point" "f" #'copy-face-color-at-point))
#+END_SRC
****** Config Tooling :WIP:

#+begin_src emacs-lisp :tangle no
(dolist (org-file my--dotfiles-org-files)
(with-current-buffer (get-file-buffer (expand-file-name org-file
                                                        my-dotfiles-dir))
(message "File: %s" (buffer-file-name))))
#+end_src

#+RESULTS:

#+name: my--scan-for-output-files
#+begin_src emacs-lisp :eval no
(defun my--scan-for-output-files (org-file)
  (let ((output-files '())
        (current-match t))
    ;; Get a buffer for the file, either one that is
    ;; already open or open a new one
    (with-current-buffer (or (get-file-buffer org-file)
                             (find-file-noselect org-file ))
      ;; Save the current buffer position
      (save-excursion
        ;; Go back to the beginning of the buffer
        (goto-char (point-min))
        (widen) ; remove any narrowing - just in case buffer is already open
        (message "Scanning buffer: %s" (buffer-name))

        ;; Loop until no more matches are found
        (while current-match
          ;; Search for blocks with a :tangle property
          ;; NOTE nil - silences search-forwards error on no match, would otherwise break the while
          (setq current-match (search-forward ":tangle " nil t))
          (when current-match
            (let ((output-file (thing-at-point 'filename t)))
              ;; If a file path was found, add it to the list
              (unless (or (not output-file)
                          (string-equal output-file "no")
                          (string-equal output-file "yes"))
                (setq output-files (cons output-file
                                         output-files))))))))
    output-files)
  )
#+end_src

_Testing_

#+name: test-scan
#+begin_src emacs-lisp
;; A simple test for my--scan-for-output-files
(defun test-scan-dotfiles ()
  (interactive)
  (let ((output-files '()))
    (dolist (org-file my--dotfiles-org-files)
      (setq output-files
            (append output-files
                    (my--scan-for-output-files
                     (expand-file-name org-file
                                       my-dotfiles-dir)))))
    (message "Output Files: %S" output-files))
  )
#+end_src

#+RESULTS:
: test-scan-dotfiles
****** Wrap-text :WIP:

ref: [[https://stackoverflow.com/questions/1760939/how-to-write-an-emacs-function-to-wrap-the-marked-region-with-specified-text][How to write an Emacs function to wrap the marked region with specified text]]
***** Debugging & Troubleshooting
****** Packages

If a package recipe isn't installed right ~straight~ will still create a directory and symlink for it even when it fails to find a package. This can lead to errors about a file or dir not being.

******* Manually updating packages
You can manually update your packages by calling:

#+begin_src bash
doom sync -u
#+end_src

This will have doom go package by package and attempt to update. This can yield very helpful debugging information such as:

#+begin_src conf
 > In repository "auto-olivetti", remote "origin" has URL
      "https://git.sr.ht/~ashton314/auto-olivetti"
    but recipe specifies a URL of
      "https://git.sr.ht/~~ashton314/auto-olivetti"
#+end_src

***** Extras
:PROPERTIES:
:ID:       daf32993-5f39-4a3f-b5ed-14362214c7ea
:END:

****** =vterm=
:PROPERTIES:
:ID:       9b5a7856-9499-4a60-a5ad-e988b624af17
:END:

Vterm requires some extra work to get functioning.
******* 1. Install =libvterm=
:PROPERTIES:
:ID:       36129ab7-f925-49e7-8d39-3425f0777ae8
:END:
#+BEGIN_SRC bash
	sudo apt-get -y install libvterm-dev
#+END_SRC
******* 2. Compile =libvterm.so=
:PROPERTIES:
:ID:       d8a5b148-bc76-4ceb-b71a-a0d6fea92c8f
:END:
Emacs should offer to do this for you when you first trying to run it.
******* 3. Configure =vterm=

vterm is meant to act like a terminal so we want it to go straight to insert mode AND we \probably\ want to land in bash (by defaul it vterm looks for sh).

=(not clear why I'm having to manually specify tangle path here?)=
#+begin_src emacs-lisp :tangle ~/.dotfiles/.config/doom/config.el
;; -- Ideally this is state dependent but this creates a nesting depth error for some reason
(after! vterm
  (when (modulep! :editor evil)
    (set-evil-initial-state! 'vterm-mode 'insert))
  (setq vterm-shell
        (or (executable-find "bash")
            (executable-find "sh")
            (executable-find "docker")
            "/bin/sh")))
#+end_src
***** Reference
:PROPERTIES:
:ID:       9f117960-0294-4f2a-a6da-1f44dd91d5fa
:END:
1. [[https://practical.li/doom-emacs/install/doom-configuration/#indent][Practical.li/doom-emacs]]
2. [[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs][Common mistakes when configuring Doom Emacs]]
3. [[https://hieuphay.com/doom-emacs-config/][Hieu Phay - My Doom Emacs Configuration - 4.1.4 Previewing LaTeX fragments]]
4. [[https://karthinks.com/software/emacs-window-management-almanac/][Karthinks - Emacs Window Almanac]]
5. [[https://tecosaur.github.io/emacs-config/][tecosaur - Doom Emacs, Configuration]]
**** my-emacs

# Local Variables:
# jinx-local-words: "config"
# End:
*** rust
**** cargo

Set the home dir for cargo and make sure we can find the executables it installs.

#+NAME: CARGO-SHELL-VAR
#+BEGIN_SRC bash
# Rust config

## Cargo conf
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export PATH="$XDG_DATA_HOME/cargo/bin:$PATH"
#+END_SRC
**** =ripgrep=

ripgrep is a dependency for doom emacs itself (plus it whips). It is better to install it directly via cargo than apt so that it can be built with 'pcre2'. Don't forget to runn ~doom sync~ after.


#+begin_src bash :tangle no
sudo cargo --features 'pcre2'
#+end_src

*** nVidia

#+name: CUDA-SHELL-VAR
#+BEGIN_SRC bash
export CUDA_CACHE_PATH="$XDG_CACHE_HOME"/nv
#+END_SRC
*** wget

#+name: WGET-SHELL-VAR
#+BEGIN_SRC bash
alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"
#+END_SRC
*** wine

#+name: WINE-SHELL-VAR
#+BEGIN_SRC bash
export WINEPREFIX="$XDG_DATA_HOME"/wine
#+END_SRC
